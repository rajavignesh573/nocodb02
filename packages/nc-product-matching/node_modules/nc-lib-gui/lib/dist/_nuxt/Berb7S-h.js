import{mockSetupInit as f}from"./CHKCftXA.js";import{e as d,r as s,u as v,dM as p,g as b,ao as I,bb as t,bd as w,bX as _,g6 as g,gb as M}from"./DRA9KN5F.js";import{a as P}from"./CQa0sIfA.js";import{u as k}from"./CSKT8BGh.js";import{a as S}from"./D7poRkS0.js";const x=d({__name:"MockInjection",setup(j){const e={meta:s(),view:s(),source:s(),filters:s([]),isPublic:s(!1),readOnly:s(!1),editMode:s(!1)},r=p(),n=v().currentRoute,m=o=>{o(e)};return t("get-mock-ref",e),t("set-mock-ref",m),t(w,e.meta),t(_,e.isPublic),t(g,e.readOnly),t(M,e.source),P(e.view,e.meta,!0,s([]),e.filters),k(e.meta,e.view),S(e.view,e.meta,()=>r==null?void 0:r.trigger(),e.isPublic.value),b(async()=>{var i,c;const{meta:o,bases:a,baseId:u,view:l}=f();e.meta.value=o,e.view.value=l,e.source.value=(c=(i=a.get(u))==null?void 0:i.sources)==null?void 0:c[0],n.value.params.typeOrId=u}),(o,a)=>I(o.$slots,"default")}});export{x as _};
