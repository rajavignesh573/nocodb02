import dayjs, { extend } from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat.js';
import isBetween from 'dayjs/plugin/isBetween';
import isSameOrAfter from 'dayjs/plugin/isSameOrAfter';
import isSameOrBefore from 'dayjs/plugin/isSameOrBefore';
import relativeTime from 'dayjs/plugin/relativeTime.js';
import { isDateMonthFormat } from '../../lib/dateTimeHelper';
import { buildFilterTree } from '../../lib/filterHelpers';
import { parseProp } from '../../lib/helperFunctions';
import UITypes from '../../lib/UITypes';
import { getLookupColumnType } from '../../lib/columnHelper/utils/get-lookup-column-type';
import { CURRENT_USER_TOKEN } from '../../lib';
import { ColumnHelper } from '../../lib';
extend(relativeTime);
extend(customParseFormat);
extend(isSameOrBefore);
extend(isSameOrAfter);
extend(isBetween);
export function validateRowFilters(params) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
    const { filters: _filters, data, columns, client, metas } = params;
    if (!_filters.length) {
        return true;
    }
    const filters = buildFilterTree(_filters);
    let isValid = null;
    for (const filter of filters) {
        let res;
        if (filter.is_group && ((_a = filter.children) === null || _a === void 0 ? void 0 : _a.length)) {
            res = validateRowFilters({
                filters: filter.children,
                data: data,
                columns: columns,
                client: client,
                metas: metas,
            });
        }
        else {
            const column = columns.find((c) => c.id === filter.fk_column_id);
            if (!column) {
                continue;
            }
            const field = column.title;
            let val = data[field];
            if ([
                UITypes.Date,
                UITypes.DateTime,
                UITypes.CreatedTime,
                UITypes.LastModifiedTime,
            ].includes(column.uidt) &&
                !['empty', 'blank', 'notempty', 'notblank'].includes(filter.comparison_op)) {
                const dateFormat = client === 'mysql2' ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD HH:mm:ssZ';
                let now = dayjs(new Date());
                const dateFormatFromMeta = (_b = parseProp(column.meta)) === null || _b === void 0 ? void 0 : _b.date_format;
                const dataVal = val;
                let filterVal = filter.value;
                if (dateFormatFromMeta && isDateMonthFormat(dateFormatFromMeta)) {
                    // reset to 1st
                    now = dayjs(now).date(1);
                    if (val)
                        val = dayjs(val).date(1);
                }
                if (filterVal)
                    res = dayjs(filterVal).isSame(dataVal, 'day');
                // handle sub operation
                switch (filter.comparison_sub_op) {
                    case 'today':
                        filterVal = now;
                        break;
                    case 'tomorrow':
                        filterVal = now.add(1, 'day');
                        break;
                    case 'yesterday':
                        filterVal = now.add(-1, 'day');
                        break;
                    case 'oneWeekAgo':
                        filterVal = now.add(-1, 'week');
                        break;
                    case 'oneWeekFromNow':
                        filterVal = now.add(1, 'week');
                        break;
                    case 'oneMonthAgo':
                        filterVal = now.add(-1, 'month');
                        break;
                    case 'oneMonthFromNow':
                        filterVal = now.add(1, 'month');
                        break;
                    case 'daysAgo':
                        if (!filterVal)
                            return null;
                        filterVal = now.add(-filterVal, 'day');
                        break;
                    case 'daysFromNow':
                        if (!filterVal)
                            return null;
                        filterVal = now.add(filterVal, 'day');
                        break;
                    case 'exactDate':
                        if (!filterVal)
                            return null;
                        break;
                    // sub-ops for `isWithin` comparison
                    case 'pastWeek':
                        filterVal = now.add(-1, 'week');
                        break;
                    case 'pastMonth':
                        filterVal = now.add(-1, 'month');
                        break;
                    case 'pastYear':
                        filterVal = now.add(-1, 'year');
                        break;
                    case 'nextWeek':
                        filterVal = now.add(1, 'week');
                        break;
                    case 'nextMonth':
                        filterVal = now.add(1, 'month');
                        break;
                    case 'nextYear':
                        filterVal = now.add(1, 'year');
                        break;
                    case 'pastNumberOfDays':
                        if (!filterVal)
                            return null;
                        filterVal = now.add(-filterVal, 'day');
                        break;
                    case 'nextNumberOfDays':
                        if (!filterVal)
                            return null;
                        filterVal = now.add(filterVal, 'day');
                        break;
                }
                if (dataVal) {
                    switch (filter.comparison_op) {
                        case 'eq':
                        case 'gb_eq':
                            res = dayjs(dataVal).isSame(filterVal, 'day');
                            break;
                        case 'neq':
                            res = !dayjs(dataVal).isSame(filterVal, 'day');
                            break;
                        case 'gt':
                            res = dayjs(dataVal).isAfter(filterVal, 'day');
                            break;
                        case 'lt':
                            res = dayjs(dataVal).isBefore(filterVal, 'day');
                            break;
                        case 'lte':
                        case 'le':
                            res = dayjs(dataVal).isSameOrBefore(filterVal, 'day');
                            break;
                        case 'gte':
                        case 'ge':
                            res = dayjs(dataVal).isSameOrAfter(filterVal, 'day');
                            break;
                        case 'empty':
                        case 'blank':
                            res = dataVal === '' || dataVal === null || dataVal === undefined;
                            break;
                        case 'notempty':
                        case 'notblank':
                            res = !(dataVal === '' ||
                                dataVal === null ||
                                dataVal === undefined);
                            break;
                        case 'isWithin': {
                            let now = dayjs(new Date()).format(dateFormat).toString();
                            now = column.uidt === UITypes.Date ? now.substring(0, 10) : now;
                            switch (filter.comparison_sub_op) {
                                case 'pastWeek':
                                case 'pastMonth':
                                case 'pastYear':
                                case 'pastNumberOfDays':
                                    res = dayjs(dataVal).isBetween(filterVal, now, 'day');
                                    break;
                                case 'nextWeek':
                                case 'nextMonth':
                                case 'nextYear':
                                case 'nextNumberOfDays':
                                    res = dayjs(dataVal).isBetween(now, filterVal, 'day');
                                    break;
                            }
                        }
                    }
                }
            }
            else {
                switch (typeof filter.value) {
                    case 'boolean':
                        val = !!data[field];
                        break;
                    case 'number':
                        val = +data[field];
                        break;
                }
                if ([UITypes.User, UITypes.CreatedBy, UITypes.LastModifiedBy].includes(column.uidt) ||
                    (column.uidt === UITypes.Lookup &&
                        [UITypes.User, UITypes.CreatedBy, UITypes.LastModifiedBy].includes(getLookupColumnType({
                            col: column,
                            meta: { columns },
                            metas: metas,
                        })))) {
                    const userIds = Array.isArray(data[field])
                        ? data[field].map((user) => user.id)
                        : ((_c = data[field]) === null || _c === void 0 ? void 0 : _c.id)
                            ? [data[field].id]
                            : [];
                    const filterValues = (((_d = filter.value) === null || _d === void 0 ? void 0 : _d.split(',')) || []).map((v) => {
                        var _a, _b, _c;
                        let result = v.trim();
                        if (result === CURRENT_USER_TOKEN) {
                            result = (_c = (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.currentUser) === null || _b === void 0 ? void 0 : _b.id) !== null && _c !== void 0 ? _c : result;
                        }
                        return result;
                    });
                    switch (filter.comparison_op) {
                        case 'anyof':
                            res = userIds.some((id) => filterValues.includes(id));
                            break;
                        case 'nanyof':
                            res = !userIds.some((id) => filterValues.includes(id));
                            break;
                        case 'allof':
                            res = filterValues.every((id) => userIds.includes(id));
                            break;
                        case 'nallof':
                            res = !filterValues.every((id) => userIds.includes(id));
                            break;
                        case 'empty':
                        case 'blank':
                            res = userIds.length === 0;
                            break;
                        case 'notempty':
                        case 'notblank':
                            res = userIds.length > 0;
                            break;
                        default:
                            res = false; // Unsupported operation for User fields
                    }
                }
                else if (column.uidt === UITypes.LinkToAnotherRecord) {
                    let linkData = data[field];
                    linkData = Array.isArray(linkData) ? linkData : [linkData];
                    const colOptions = column.colOptions;
                    const relatedModelId = colOptions === null || colOptions === void 0 ? void 0 : colOptions.fk_related_model_id;
                    const relatedMeta = metas[relatedModelId];
                    if (!(relatedMeta === null || relatedMeta === void 0 ? void 0 : relatedMeta.columns)) {
                        res = false;
                    }
                    else {
                        // Find the child column in the related table
                        const childColumn = relatedMeta.columns.find((col) => col.pv);
                        if (!childColumn) {
                            res = false;
                        }
                        else {
                            const childFieldName = childColumn.title;
                            const childValues = linkData
                                .map((item) => {
                                var _a;
                                return ((_a = item === null || item === void 0 ? void 0 : item[childFieldName]) === null || _a === void 0 ? void 0 : _a.toString()) || '';
                            })
                                .filter((val) => val !== '');
                            switch (filter.comparison_op) {
                                case 'eq':
                                    res = childValues.includes(filter.value);
                                    break;
                                case 'neq':
                                    res = !childValues.includes(filter.value);
                                    break;
                                case 'like':
                                    res = childValues.some((val) => {
                                        var _a;
                                        return val
                                            .toLowerCase()
                                            .includes(((_a = filter.value) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || '');
                                    });
                                    break;
                                case 'nlike':
                                    res = !childValues.some((val) => {
                                        var _a;
                                        return val
                                            .toLowerCase()
                                            .includes(((_a = filter.value) === null || _a === void 0 ? void 0 : _a.toLowerCase()) || '');
                                    });
                                    break;
                                case 'anyof': {
                                    const filterValues = ((_e = filter.value) === null || _e === void 0 ? void 0 : _e.split(',').map((v) => v.trim())) || [];
                                    res = childValues.some((val) => filterValues.includes(val));
                                    break;
                                }
                                case 'nanyof': {
                                    const filterValues2 = ((_f = filter.value) === null || _f === void 0 ? void 0 : _f.split(',').map((v) => v.trim())) || [];
                                    res = !childValues.some((val) => filterValues2.includes(val));
                                    break;
                                }
                                case 'allof': {
                                    const filterValues3 = ((_g = filter.value) === null || _g === void 0 ? void 0 : _g.split(',').map((v) => v.trim())) || [];
                                    res = filterValues3.every((filterVal) => childValues.includes(filterVal));
                                    break;
                                }
                                case 'nallof': {
                                    const filterValues4 = ((_h = filter.value) === null || _h === void 0 ? void 0 : _h.split(',').map((v) => v.trim())) || [];
                                    res = !filterValues4.every((filterVal) => childValues.includes(filterVal));
                                    break;
                                }
                                case 'empty':
                                case 'blank':
                                    res = linkData.length === 0;
                                    break;
                                case 'notempty':
                                case 'notblank':
                                    res = linkData.length > 0;
                                    break;
                                default:
                                    res = false;
                            }
                        }
                    }
                }
                else if ([UITypes.JSON, UITypes.Time].includes(column.uidt) &&
                    ['eq'].includes(filter.comparison_op)) {
                    res = ColumnHelper.getColumn(column.uidt).equalityComparison(val, filter.value, {
                        col: column,
                    });
                }
                else {
                    switch (filter.comparison_op) {
                        case 'eq':
                        case 'gb_eq':
                            res = val == filter.value;
                            break;
                        case 'neq':
                            res = val != filter.value;
                            break;
                        case 'like':
                            res =
                                ((_m = (_l = (_k = (_j = data[field]) === null || _j === void 0 ? void 0 : _j.toString) === null || _k === void 0 ? void 0 : _k.call(_j)) === null || _l === void 0 ? void 0 : _l.toLowerCase()) === null || _m === void 0 ? void 0 : _m.indexOf((_o = filter.value) === null || _o === void 0 ? void 0 : _o.toLowerCase())) > -1;
                            break;
                        case 'nlike':
                            res =
                                ((_s = (_r = (_q = (_p = data[field]) === null || _p === void 0 ? void 0 : _p.toString) === null || _q === void 0 ? void 0 : _q.call(_p)) === null || _r === void 0 ? void 0 : _r.toLowerCase()) === null || _s === void 0 ? void 0 : _s.indexOf((_t = filter.value) === null || _t === void 0 ? void 0 : _t.toLowerCase())) === -1;
                            break;
                        case 'empty':
                        case 'blank':
                            res =
                                data[field] === '' ||
                                    data[field] === null ||
                                    data[field] === undefined;
                            break;
                        case 'notempty':
                        case 'notblank':
                            res = !(data[field] === '' ||
                                data[field] === null ||
                                data[field] === undefined);
                            break;
                        case 'checked':
                            res = !!data[field];
                            break;
                        case 'notchecked':
                            res = !data[field];
                            break;
                        case 'null':
                            res = res = data[field] === null;
                            break;
                        case 'notnull':
                            res = data[field] !== null;
                            break;
                        case 'allof':
                            res = ((_v = (_u = filter.value) === null || _u === void 0 ? void 0 : _u.split(',').map((item) => item.trim())) !== null && _v !== void 0 ? _v : []).every((item) => { var _a, _b; return ((_b = (_a = data[field]) === null || _a === void 0 ? void 0 : _a.split(',')) !== null && _b !== void 0 ? _b : []).includes(item); });
                            break;
                        case 'anyof':
                            res = ((_x = (_w = filter.value) === null || _w === void 0 ? void 0 : _w.split(',').map((item) => item.trim())) !== null && _x !== void 0 ? _x : []).some((item) => { var _a, _b; return ((_b = (_a = data[field]) === null || _a === void 0 ? void 0 : _a.split(',')) !== null && _b !== void 0 ? _b : []).includes(item); });
                            break;
                        case 'nallof':
                            res = !((_z = (_y = filter.value) === null || _y === void 0 ? void 0 : _y.split(',').map((item) => item.trim())) !== null && _z !== void 0 ? _z : []).every((item) => { var _a, _b; return ((_b = (_a = data[field]) === null || _a === void 0 ? void 0 : _a.split(',')) !== null && _b !== void 0 ? _b : []).includes(item); });
                            break;
                        case 'nanyof':
                            res = !((_1 = (_0 = filter.value) === null || _0 === void 0 ? void 0 : _0.split(',').map((item) => item.trim())) !== null && _1 !== void 0 ? _1 : []).some((item) => { var _a, _b; return ((_b = (_a = data[field]) === null || _a === void 0 ? void 0 : _a.split(',')) !== null && _b !== void 0 ? _b : []).includes(item); });
                            break;
                        case 'lt':
                            res = +data[field] < +filter.value;
                            break;
                        case 'lte':
                        case 'le':
                            res = +data[field] <= +filter.value;
                            break;
                        case 'gt':
                            res = +data[field] > +filter.value;
                            break;
                        case 'gte':
                        case 'ge':
                            res = +data[field] >= +filter.value;
                            break;
                    }
                }
            }
        }
        switch (filter.logical_op) {
            case 'or':
                isValid = isValid || !!res;
                break;
            case 'not':
                isValid = isValid && !res;
                break;
            case 'and':
            default:
                isValid = (isValid !== null && isValid !== void 0 ? isValid : true) && res;
                break;
        }
    }
    return isValid;
}
//# sourceMappingURL=data:application/json;base64,