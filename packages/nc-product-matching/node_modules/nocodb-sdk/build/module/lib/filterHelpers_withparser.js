import { QueryFilterParser } from '../lib/parser/queryFilter/query-filter-parser';
import UITypes from './UITypes';
import { InvalidFilterError } from './error/invalid-filter.error';
import { COMPARISON_SUB_OPS, IS_WITHIN_COMPARISON_SUB_OPS, } from './filterHelpers';
export { COMPARISON_OPS, COMPARISON_SUB_OPS, GROUPBY_COMPARISON_OPS, IS_WITHIN_COMPARISON_SUB_OPS, } from '../lib/parser/queryFilter/query-filter-lexer';
export function extractFilterFromXwhere(str, aliasColObjMap, throwErrorIfInvalid = false, errors = []) {
    if (!str) {
        return { filters: [] };
    }
    for (const columnName of Object.keys(aliasColObjMap)) {
        const column = aliasColObjMap[columnName];
        aliasColObjMap[column.id] = column;
    }
    return innerExtractFilterFromXwhere(str, aliasColObjMap, throwErrorIfInvalid, errors);
}
function innerExtractFilterFromXwhere(str, aliasColObjMap, throwErrorIfInvalid = false, errors = []) {
    if (!str) {
        return { filters: [] };
    } // if array treat it as `and` group
    else if (Array.isArray(str)) {
        // calling recursively for nested query
        const nestedFilters = [].concat(...str.map((s) => extractFilterFromXwhere(s, aliasColObjMap, throwErrorIfInvalid)));
        // extract and flatten filters
        const filters = nestedFilters.reduce((acc, { filters }) => {
            if (!filters)
                return acc;
            return [...acc, ...filters];
        }, []);
        // extract and flatten errors
        const collectedErrors = nestedFilters.reduce((acc, { errors }) => {
            if (!errors)
                return acc;
            return [...acc, ...errors];
        }, []);
        // If errors exist, return them
        if (collectedErrors.length > 0) {
            return { errors: collectedErrors };
        }
        // If there's only one filter, return it directly
        if (filters.length === 1) {
            return { filters: nestedFilters };
        }
        // Otherwise, wrap it in an AND group
        return {
            filters: [
                {
                    is_group: true,
                    logical_op: 'and',
                    children: filters,
                },
            ],
        };
    }
    else if (typeof str !== 'string' && throwErrorIfInvalid) {
        const message = 'Invalid filter format. Expected string or array of strings';
        if (throwErrorIfInvalid) {
            throw new InvalidFilterError({ message });
        }
        else {
            errors.push({ message });
            return { errors };
        }
    }
    const parseResult = QueryFilterParser.parse(str);
    if ((parseResult.lexErrors.length > 0 || parseResult.parseErrors.length > 0) &&
        throwErrorIfInvalid) {
        if (throwErrorIfInvalid)
            throw new InvalidFilterError({
                lexingError: parseResult.lexErrors,
                parsingError: parseResult.parseErrors,
            });
        else {
            errors.push({
                message: 'Invalid filter format',
            });
            return { errors };
        }
    }
    const filterSubType = parseResult.parsedCst;
    const { filter, errors: parseErrors } = mapFilterGroupSubType(filterSubType, aliasColObjMap, throwErrorIfInvalid);
    if ((parseErrors === null || parseErrors === void 0 ? void 0 : parseErrors.length) > 0) {
        return { errors: parseErrors };
    }
    return { filters: [filter] };
}
function mapFilterGroupSubType(filter, aliasColObjMap, throwErrorIfInvalid = false, errors = []) {
    const children = filter.children
        .map((k) => k.is_group
        ? mapFilterGroupSubType(k, aliasColObjMap, throwErrorIfInvalid, errors)
        : mapFilterClauseSubType(k, aliasColObjMap, throwErrorIfInvalid, errors))
        .filter((k) => k);
    if (children.length === 1) {
        return children[0];
    }
    else {
        return {
            filter: {
                is_group: filter.is_group,
                logical_op: filter.logical_op,
                children: children.map((k) => k.filter),
            },
        };
    }
}
function mapFilterClauseSubType(filter, aliasColObjMap, throwErrorIfInvalid = false, errors = []) {
    const aliasCol = aliasColObjMap[filter.field];
    if (!aliasCol) {
        if (throwErrorIfInvalid) {
            throw new InvalidFilterError({
                message: `Invalid filter field '${filter.field}' not found`,
            });
        }
        else {
            errors.push({
                message: `Invalid filter field '${filter.field}' not found`,
            });
            return { errors };
        }
        return {};
    }
    const result = {
        fk_column_id: aliasCol.id,
        is_group: false,
        logical_op: filter.logical_op,
        comparison_op: filter.comparison_op,
        comparison_sub_op: undefined,
        value: filter.value,
    };
    return handleDataTypes(result, aliasCol, throwErrorIfInvalid, errors);
}
function handleDataTypes(filterType, column, throwErrorIfInvalid = false, errors = []) {
    if (filterType.value === null) {
        return { filter: filterType };
    }
    if ([
        UITypes.Date,
        UITypes.DateTime,
        UITypes.CreatedTime,
        UITypes.LastModifiedTime,
    ].includes(column.uidt) &&
        filterType.value) {
        const [subOp, ...value] = Array.isArray(filterType.value)
            ? filterType.value
            : filterType.value.split(',').map((k) => k.trim());
        filterType.comparison_sub_op = subOp;
        filterType.value = value.join('');
        if (filterType.comparison_sub_op) {
            if (!COMPARISON_SUB_OPS.includes(filterType.comparison_sub_op)) {
                if (throwErrorIfInvalid)
                    throw new InvalidFilterError({
                        message: `Invalid filter '${filterType.comparison_sub_op}' is not supported`,
                    });
                else {
                    errors.push({
                        message: `Invalid filter '${filterType.comparison_sub_op}' is not supported`,
                    });
                    return { errors };
                }
            }
        }
        if ((filterType.comparison_op === 'isWithin' &&
            !IS_WITHIN_COMPARISON_SUB_OPS.includes(filterType.comparison_sub_op)) ||
            (filterType.comparison_op !== 'isWithin' &&
                IS_WITHIN_COMPARISON_SUB_OPS.includes(filterType.comparison_sub_op))) {
            if (throwErrorIfInvalid)
                throw new InvalidFilterError({
                    message: `Invalid filter '${filterType.comparison_sub_op}' is not supported for '${filterType.comparison_op}'`,
                });
            else {
                errors.push({
                    message: `Invalid filter '${filterType.comparison_sub_op}' is not supported for '${filterType.comparison_op}'`,
                });
                return { errors };
            }
        }
        if (filterType.value === '') {
            filterType.value = undefined;
        }
    }
    return { filter: filterType };
}
//# sourceMappingURL=data:application/json;base64,