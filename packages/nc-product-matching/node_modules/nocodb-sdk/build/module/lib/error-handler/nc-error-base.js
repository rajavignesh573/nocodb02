import { BadRequestV2, MetaError, NotAllowed, NotFound, OptionsNotExistsError, SsoError, TestConnectionError, UnprocessableEntity, } from '../error/nc-base.error';
import { NcErrorType } from '../globals';
import { HigherPlan, PlanFeatureUpgradeMessages, } from '../payment';
import { NcErrorCodexManager } from './nc-error-codex-manager';
export class NcErrorBase {
    constructor() {
        this._errorCodex = new NcErrorCodexManager();
    }
    get errorCodex() {
        return this._errorCodex;
    }
    authenticationRequired(args) {
        throw this.errorCodex.generateError(NcErrorType.AUTHENTICATION_REQUIRED, args);
    }
    apiTokenNotAllowed(args) {
        throw this.errorCodex.generateError(NcErrorType.API_TOKEN_NOT_ALLOWED, args);
    }
    workspaceNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.WORKSPACE_NOT_FOUND, Object.assign({ params: id }, args));
    }
    columnAssociatedWithLink(_id, args) {
        throw this.errorCodex.generateError(NcErrorType.COLUMN_ASSOCIATED_WITH_LINK, args);
    }
    tableAssociatedWithLink(_id, args) {
        throw this.errorCodex.generateError(NcErrorType.TABLE_ASSOCIATED_WITH_LINK, args);
    }
    baseNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.BASE_NOT_FOUND, Object.assign({ params: id }, args));
    }
    dashboardNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.DASHBOARD_NOT_FOUND, Object.assign({ params: id }, args));
    }
    widgetNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.WIDGET_NOT_FOUND, Object.assign({ params: id }, args));
    }
    sourceNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.SOURCE_NOT_FOUND, Object.assign({ params: id }, args));
    }
    tableNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.TABLE_NOT_FOUND, Object.assign({ params: id }, args));
    }
    userNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.USER_NOT_FOUND, Object.assign({ params: id }, args));
    }
    viewNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.VIEW_NOT_FOUND, Object.assign({ params: id }, args));
    }
    hookNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.HOOK_NOT_FOUND, Object.assign({ params: id }, args));
    }
    genericNotFound(resource, id, args) {
        throw this.errorCodex.generateError(NcErrorType.GENERIC_NOT_FOUND, Object.assign({ params: [resource, id] }, args));
    }
    requiredFieldMissing(field, args) {
        throw this.errorCodex.generateError(NcErrorType.REQUIRED_FIELD_MISSING, Object.assign({ params: field }, args));
    }
    duplicateRecord(id, args) {
        throw this.errorCodex.generateError(NcErrorType.ERROR_DUPLICATE_RECORD, Object.assign({ params: id }, args));
    }
    fieldNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.FIELD_NOT_FOUND, Object.assign({ params: id }, args));
    }
    invalidOffsetValue(offset, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_OFFSET_VALUE, Object.assign({ params: `${offset}` }, args));
    }
    invalidPageValue(page, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_PAGE_VALUE, Object.assign({ params: `${page}` }, args));
    }
    invalidPrimaryKey(value, pkColumn, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_PK_VALUE, Object.assign({ params: [value, pkColumn] }, args));
    }
    invalidLimitValue(args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_LIMIT_VALUE, Object.assign({}, args));
    }
    invalidFilter(filter, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_FILTER, Object.assign({ params: filter }, args));
    }
    invalidValueForField(payload, args) {
        const withReason = typeof payload === 'object' && payload.reason
            ? `, reason: ${payload.reason}`
            : ``;
        throw this.errorCodex.generateError(NcErrorType.INVALID_VALUE_FOR_FIELD, Object.assign({ params: typeof payload === 'string'
                ? payload
                : `Invalid value '${payload.value}' for type '${payload.type}' on column '${payload.column}'${withReason}` }, args));
    }
    valueLengthExceedLimit(payload, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_VALUE_FOR_FIELD, Object.assign({ params: `Value length '${payload.length}' is exceeding allowed limit '${payload.maxLength}' for type '${payload.type}' on column '${payload.column}'` }, args));
    }
    invalidSharedViewPassword(args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_SHARED_VIEW_PASSWORD, Object.assign({}, args));
    }
    invalidSharedDashboardPassword(args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_SHARED_DASHBOARD_PASSWORD, Object.assign({}, args));
    }
    invalidAttachmentJson(payload, args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_ATTACHMENT_JSON, Object.assign({ params: payload }, args));
    }
    notImplemented(feature = 'Feature', args) {
        throw this.errorCodex.generateError(NcErrorType.NOT_IMPLEMENTED, Object.assign({ params: feature }, args));
    }
    internalServerError(message, args) {
        throw this.errorCodex.generateError(NcErrorType.INTERNAL_SERVER_ERROR, Object.assign({ params: message }, args));
    }
    formulaError(message, args) {
        throw this.errorCodex.generateError(NcErrorType.FORMULA_ERROR, Object.assign({ params: message }, args));
    }
    formulaCircularRefError(message, args) {
        throw this.errorCodex.generateError(NcErrorType.FORMULA_CIRCULAR_REF_ERROR, Object.assign({ params: message }, args));
    }
    unauthorized(message, args) {
        throw this.errorCodex.generateError(NcErrorType.AUTHENTICATION_REQUIRED, Object.assign({ params: message }, args));
    }
    forbidden(message, args) {
        throw this.errorCodex.generateError(NcErrorType.FORBIDDEN, Object.assign({ params: message }, args));
    }
    sourceDataReadOnly(name) {
        this.forbidden(`Source '${name}' is read-only`);
    }
    sourceMetaReadOnly(name) {
        this.forbidden(`Source '${name}' schema is read-only`);
    }
    integrationNotFound(id, args) {
        throw this.errorCodex.generateError(NcErrorType.INTEGRATION_NOT_FOUND, Object.assign({ params: id }, (args || {})));
    }
    cannotCalculateIntermediateOrderError() {
        throw this.errorCodex.generateError(NcErrorType.CANNOT_CALCULATE_INTERMEDIATE_ORDER, {});
    }
    reorderFailed() {
        throw this.errorCodex.generateError(NcErrorType.REORDER_FAILED, {});
    }
    integrationLinkedWithMultiple(bases, sources, args) {
        throw this.errorCodex.generateError(NcErrorType.INTEGRATION_LINKED_WITH_BASES, Object.assign({ params: bases.map((s) => s.title).join(', '), details: {
                bases: bases.map((b) => {
                    return {
                        id: b.id,
                        title: b.title,
                    };
                }),
                sources: sources.map((s) => {
                    return {
                        id: s.id,
                        base_id: s.base_id,
                        title: s.alias,
                    };
                }),
            } }, (args || {})));
    }
    invalidAttachmentUploadScope(args) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_ATTACHMENT_UPLOAD_SCOPE, args);
    }
    planLimitExceeded(message, details, args) {
        throw this.errorCodex.generateError(NcErrorType.PLAN_LIMIT_EXCEEDED, Object.assign(Object.assign({ params: message }, args), { details: Object.assign(Object.assign({}, details), ((details === null || details === void 0 ? void 0 : details.plan) ? { higherPlan: HigherPlan[details.plan] } : {})) }));
    }
    allowedOnlySSOAccess(ncWorkspaceId) {
        throw this.errorCodex.generateError(NcErrorType.SSO_LOGIN_REQUIRED, {
            params: ncWorkspaceId,
        });
    }
    allowedOnlySSOGeneratedToken(ncWorkspaceId) {
        throw this.errorCodex.generateError(NcErrorType.SSO_GENERATED_TOKEN_REQUIRED, {
            params: ncWorkspaceId,
        });
    }
    maxInsertLimitExceeded(limit, args) {
        throw this.errorCodex.generateError(NcErrorType.MAX_INSERT_LIMIT_EXCEEDED, Object.assign({ params: limit.toString() }, args));
    }
    baseUserError(message, args) {
        throw this.errorCodex.generateError(NcErrorType.BASE_USER_ERROR, Object.assign({ params: message }, args));
    }
    maxWorkspaceLimitReached(args) {
        throw this.errorCodex.generateError(NcErrorType.MAX_WORKSPACE_LIMIT_REACHED, Object.assign({}, args));
    }
    prohibitedSyncTableOperation(param, args) {
        let message = '';
        switch (param.operation) {
            case 'insert':
            case 'update':
            case 'delete':
                message = `Prohibited data insert / update / delete operation on synced table ${param.modelName}`;
                break;
            case 'create_form_view':
                message = `Form view creation is not supported for synced table ${param.modelName}`;
                break;
        }
        throw this.errorCodex.generateError(NcErrorType.PROHIBITED_SYNC_TABLE_OPERATION, Object.assign({ params: message }, args));
    }
    featureNotSupported(props, args) {
        var _a, _b;
        if (props.isOnPrem) {
            throw this.errorCodex.generateError(NcErrorType.FEATURE_NOT_SUPPORTED, Object.assign({ params: `Please upgrade your license ${(_a = PlanFeatureUpgradeMessages[props.feature]) !== null && _a !== void 0 ? _a : 'to use this feature.'}` }, args));
        }
        throw this.errorCodex.generateError(NcErrorType.FEATURE_NOT_SUPPORTED, Object.assign({ params: `Upgrade to a higher plan ${(_b = PlanFeatureUpgradeMessages[props.feature]) !== null && _b !== void 0 ? _b : 'to use this feature.'}` }, args));
    }
    invalidRequestBody(message) {
        throw this.errorCodex.generateError(NcErrorType.INVALID_REQUEST_BODY, {
            params: message,
        });
    }
    unprocessableEntity(message = 'Unprocessable entity') {
        throw new UnprocessableEntity(message);
    }
    testConnectionError(message = 'Unprocessable entity', code) {
        throw new TestConnectionError(message, code);
    }
    notAllowed(message = 'Not allowed') {
        throw new NotAllowed(message);
    }
    emailDomainNotAllowed(domain) {
        throw new SsoError(`Email domain ${domain} is not allowed for this organization`);
    }
    metaError(param) {
        throw new MetaError(param);
    }
    notFound(message = 'Not found') {
        throw new NotFound(message);
    }
    badRequest(message) {
        throw new BadRequestV2(message);
    }
    optionsNotExists(props) {
        throw new OptionsNotExistsError(props);
    }
}
//# sourceMappingURL=data:application/json;base64,