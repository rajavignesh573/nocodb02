import UITypes, { isLinksOrLTAR, isNumericCol } from './UITypes';
import { RelationTypes } from './globals';
import { ClientType } from './enums';
import { IntegrationsType, } from './Api';
import { FormulaDataTypes } from './formulaHelpers';
import { ncIsNull, ncIsUndefined } from '../lib/is';
// import {RelationTypes} from "./globals";
// const systemCols = ['created_at', 'updated_at']
const filterOutSystemColumns = (columns) => {
    return (columns && columns.filter((c) => !isSystemColumn(c))) || [];
};
const getSystemColumnsIds = (columns) => {
    return ((columns && columns.filter(isSystemColumn)) || []).map((c) => c.id);
};
const getSystemColumns = (columns) => columns.filter(isSystemColumn) || [];
const isSystemColumn = (col) => !!(col &&
    (col.uidt === UITypes.ForeignKey ||
        ((col.column_name === 'created_at' || col.column_name === 'updated_at') &&
            col.uidt === UITypes.DateTime) ||
        (col.pk && (col.ai || col.cdf)) ||
        (col.pk && col.meta && col.meta.ag) ||
        col.system));
const isSelfReferencingTableColumn = (col) => {
    var _a, _b, _c;
    return (col &&
        (col.uidt === UITypes.Links || col.uidt === UITypes.LinkToAnotherRecord) &&
        ((col === null || col === void 0 ? void 0 : col.fk_model_id) || ((_a = col === null || col === void 0 ? void 0 : col.colOptions) === null || _a === void 0 ? void 0 : _a.fk_model_id)) &&
        ((_b = col === null || col === void 0 ? void 0 : col.colOptions) === null || _b === void 0 ? void 0 : _b.fk_related_model_id) &&
        ((col === null || col === void 0 ? void 0 : col.fk_model_id) || ((_c = col === null || col === void 0 ? void 0 : col.colOptions) === null || _c === void 0 ? void 0 : _c.fk_model_id)) ===
            col.colOptions.fk_related_model_id);
};
const extractRolesObj = (roles) => {
    if (!roles)
        return null;
    if (typeof roles === 'object' && !Array.isArray(roles))
        return roles;
    if (typeof roles === 'string') {
        roles = roles.split(',');
    }
    if (roles.length === 0)
        return null;
    return roles.reduce((acc, role) => {
        acc[role] = true;
        return acc;
    }, {});
};
const stringifyRolesObj = (roles) => {
    if (!roles)
        return '';
    const rolesArr = Object.keys(roles).filter((r) => roles[r]);
    return rolesArr.join(',');
};
const getAvailableRollupForColumn = (column) => {
    var _a, _b;
    if ([UITypes.Formula].includes(column.uidt)) {
        return getAvailableRollupForFormulaType((_b = (_a = column.colOptions.parsed_tree) === null || _a === void 0 ? void 0 : _a.dataType) !== null && _b !== void 0 ? _b : FormulaDataTypes.UNKNOWN);
    }
    else {
        return getAvailableRollupForUiType(column.uidt);
    }
};
const getAvailableRollupForUiType = (type) => {
    if ([
        UITypes.Year,
        UITypes.Time,
        UITypes.Date,
        UITypes.DateTime,
        UITypes.CreatedTime,
        UITypes.LastModifiedTime,
    ].includes(type)) {
        return ['count', 'min', 'max', 'countDistinct'];
    }
    if (isNumericCol(type)) {
        // Number, Currency, Percent, Duration, Rating, Decimal
        return [
            'sum',
            'count',
            'min',
            'max',
            'avg',
            'countDistinct',
            'sumDistinct',
            'avgDistinct',
        ];
    }
    if ([
        UITypes.SingleLineText,
        UITypes.LongText,
        UITypes.User,
        UITypes.Email,
        UITypes.PhoneNumber,
        UITypes.URL,
        UITypes.JSON,
    ].includes(type)) {
        return ['count', 'countDistinct'];
    }
    if ([UITypes.Checkbox].includes(type)) {
        return ['count', 'sum'];
    }
    if ([UITypes.Attachment].includes(type)) {
        return [];
    }
    if ([UITypes.SingleSelect, UITypes.MultiSelect].includes(type)) {
        return ['count', 'countDistinct'];
    }
    return [
        'sum',
        'count',
        'min',
        'max',
        'avg',
        'countDistinct',
        'sumDistinct',
        'avgDistinct',
    ];
};
const getAvailableRollupForFormulaType = (type) => {
    switch (type) {
        case FormulaDataTypes.DATE:
        case FormulaDataTypes.INTERVAL: {
            return ['count', 'min', 'max', 'countDistinct'];
        }
        case FormulaDataTypes.NUMERIC: {
            return [
                'sum',
                'count',
                'min',
                'max',
                'avg',
                'countDistinct',
                'sumDistinct',
                'avgDistinct',
            ];
        }
        case FormulaDataTypes.BOOLEAN: {
            return ['count', 'sum'];
        }
        case FormulaDataTypes.STRING: {
            return ['count', 'countDistinct'];
        }
        case FormulaDataTypes.UNKNOWN:
        default: {
            return ['count'];
        }
    }
};
const getRenderAsTextFunForUiType = (type) => {
    if ([
        UITypes.Year,
        UITypes.Time,
        UITypes.Date,
        UITypes.DateTime,
        UITypes.CreatedTime,
        UITypes.LastModifiedTime,
        UITypes.Currency,
        UITypes.Duration,
    ].includes(type)) {
        return ['count', 'countDistinct'];
    }
    return [
        'sum',
        'count',
        'avg',
        'min',
        'max',
        'countDistinct',
        'sumDistinct',
        'avgDistinct',
    ];
};
const getFileName = ({ name, count, ext }) => `${name}${count ? `(${count})` : ''}${ext ? `${ext}` : ''}`;
// add count before extension if duplicate name found
function populateUniqueFileName(fileName, attachments) {
    return fileName.replace(/^(.+?)(?:\((\d+)\))?(\.(?:tar|min)\.(?:\w{2,4})|\.\w+)$/, (fileName, name, count, ext) => {
        let genFileName = fileName;
        let c = count || 1;
        // iterate until a unique name
        while (attachments.some((fn) => fn === genFileName)) {
            genFileName = getFileName({
                name,
                ext,
                count: c++,
            });
        }
        return genFileName;
    });
}
function roundUpToPrecision(number, precision = 0) {
    precision =
        precision == null
            ? 0
            : precision >= 0
                ? Math.min(precision, 292)
                : Math.max(precision, -292);
    if (precision) {
        // Shift with exponential notation to avoid floating-point issues.
        // See [MDN](https://mdn.io/round#Examples) for more details.
        let pair = `${number}e`.split('e');
        const value = Math.round(Number(`${pair[0]}e${+pair[1] + precision}`));
        pair = `${value}e`.split('e');
        return (+`${pair[0]}e${+pair[1] - precision}`).toFixed(precision);
    }
    return Math.round(number).toFixed(precision);
}
export { filterOutSystemColumns, getSystemColumnsIds, getSystemColumns, isSystemColumn, isSelfReferencingTableColumn, extractRolesObj, stringifyRolesObj, getAvailableRollupForColumn, getAvailableRollupForUiType, getAvailableRollupForFormulaType, getRenderAsTextFunForUiType, populateUniqueFileName, roundUpToPrecision, };
const testDataBaseNames = {
    [ClientType.MYSQL]: null,
    mysql: null,
    [ClientType.PG]: 'postgres',
    oracledb: 'xe',
    [ClientType.SQLITE]: 'a.sqlite',
};
export const getTestDatabaseName = (db) => {
    var _a;
    if (db.client === ClientType.PG || db.client === ClientType.SNOWFLAKE)
        return (_a = db.connection) === null || _a === void 0 ? void 0 : _a.database;
    return testDataBaseNames[db.client];
};
export const integrationCategoryNeedDefault = (category) => {
    return [IntegrationsType.Ai].includes(category);
};
export function parseProp(v) {
    var _a;
    if (ncIsUndefined(v) || ncIsNull(v))
        return {};
    try {
        return typeof v === 'string' ? (_a = JSON.parse(v)) !== null && _a !== void 0 ? _a : {} : v;
    }
    catch (_b) {
        return {};
    }
}
export function stringifyProp(v) {
    var _a;
    if (ncIsUndefined(v) || ncIsNull(v))
        return '{}';
    try {
        return typeof v === 'string' ? v : (_a = JSON.stringify(v)) !== null && _a !== void 0 ? _a : '{}';
    }
    catch (_b) {
        return '{}';
    }
}
export function parseHelper(v) {
    try {
        return typeof v === 'string' ? JSON.parse(v) : v;
    }
    catch (_a) {
        return v;
    }
}
export function stringifyHelper(v) {
    try {
        return typeof v === 'string' ? v : JSON.stringify(v);
    }
    catch (_a) {
        return v;
    }
}
export function toSafeInteger(value) {
    return Math.max(Number.MIN_SAFE_INTEGER, Math.min(value, Number.MAX_SAFE_INTEGER));
}
export function isCrossBaseLink(col) {
    var _a, _b, _c;
    return (col &&
        isLinksOrLTAR(col) &&
        ((_a = col.colOptions) === null || _a === void 0 ? void 0 : _a.fk_related_base_id) &&
        ((_b = col.colOptions) === null || _b === void 0 ? void 0 : _b.fk_related_base_id) !==
            ((_c = col.colOptions) === null || _c === void 0 ? void 0 : _c.base_id));
}
export function lookupCanHaveRecursiveEvaluation(param) {
    const { isEeUI, dbClientType, relationType, relationCol } = param;
    return (isEeUI &&
        dbClientType === ClientType.PG &&
        isSelfReferencingTableColumn(relationCol) &&
        [RelationTypes.HAS_MANY, RelationTypes.BELONGS_TO].includes(relationType));
}
export function formatBytes(bytes, decimals = 2, base = 1000) {
    if (bytes === 0)
        return '0 Bytes';
    const k = base;
    const dm = Math.max(0, decimals);
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return `${(bytes / Math.pow(k, i)).toFixed(dm)} ${sizes[i]}`;
}
//# sourceMappingURL=data:application/json;base64,