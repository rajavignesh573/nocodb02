export declare enum AppendToLengthSuffix {
    _ = "_",
    dot = "dot"
}
/**
 * get a row & column given a numeric position
 * row & column start at 0
 */
export declare function getRowColPositionFromIndex({ stack, position, }: {
    stack: string;
    position: number;
}): {
    column: number;
    row: number;
};
export declare function appendToLength(param: {
    value: string;
    appendage: string;
    maxLength: number;
    isExists: (value: string) => Promise<boolean>;
    suffix?: AppendToLengthSuffix;
}): Promise<string>;
export declare function truncateToLength(param: {
    value: string;
    maxLength: number;
    currentIndex?: number;
    isExists: (value: string) => Promise<boolean>;
    suffix?: AppendToLengthSuffix;
}): Promise<string>;
/**
 * Generates a unique copy name by checking against existing names/items
 */
export declare function generateUniqueCopyName<T = string>(originalName: string, existing: T[] | string[], options?: {
    /** Property name or accessor function to get the name from objects */
    accessor?: keyof T | ((item: T) => string);
    /** Prefix to use (default: "Copy of") */
    prefix?: string;
    /** Separator before counter (default: " ") */
    separator?: string;
    /** Format for counter, use {counter} placeholder (default: "({counter})") */
    counterFormat?: string;
}): string;
export declare function escapeRegexString(string: string): string;
