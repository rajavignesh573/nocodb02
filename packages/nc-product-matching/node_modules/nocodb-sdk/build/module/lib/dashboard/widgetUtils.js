import { ChartTypes, TextWidgetTypes, WidgetDataSourceTypes, WidgetTypes, } from '.';
import { UITypes } from '../../lib';
export const calculateNextPosition = (existingWidgets, newWidgetDimensions, gridColumns = 4) => {
    if (existingWidgets.length === 0) {
        return { x: 0, y: 0 };
    }
    const { w: newW, h: newH } = newWidgetDimensions;
    // Early return if widget is too wide
    if (newW > gridColumns) {
        return { x: 0, y: 0 };
    }
    // Create a 2D grid to track occupied cells more efficiently
    const grid = new Map();
    let maxY = 0;
    // Build the occupation map
    for (const widget of existingWidgets) {
        const { x, y, w, h } = widget.position;
        const endY = y + h;
        maxY = Math.max(maxY, endY);
        for (let row = y; row < endY; row++) {
            if (!grid.has(row)) {
                grid.set(row, new Set());
            }
            const rowSet = grid.get(row);
            for (let col = x; col < x + w; col++) {
                rowSet.add(col);
            }
        }
    }
    // position checking
    const isPositionAvailable = (x, y) => {
        for (let row = y; row < y + newH; row++) {
            const rowSet = grid.get(row);
            if (rowSet) {
                for (let col = x; col < x + newW; col++) {
                    if (rowSet.has(col))
                        return false;
                }
            }
        }
        return true;
    };
    // Find the first available position, scanning row by row
    const maxX = gridColumns - newW;
    for (let y = 0; y <= maxY + 1; y++) {
        for (let x = 0; x <= maxX; x++) {
            if (isPositionAvailable(x, y)) {
                return { x, y };
            }
        }
    }
    // Fallback: place at bottom-left
    return { x: 0, y: maxY };
};
const getDefaultConfig = (widgetType, chartType, columns) => {
    switch (widgetType) {
        case WidgetTypes.METRIC:
            return {
                dataSource: WidgetDataSourceTypes.MODEL,
                metric: {
                    type: 'count',
                    aggregation: 'count',
                },
                appearance: {
                    type: 'filled',
                    theme: 'purple',
                },
            };
        case WidgetTypes.CHART:
            return getDefaultChartConfig(chartType, columns);
        case WidgetTypes.TEXT:
            return {
                content: 'Enter text here',
                type: TextWidgetTypes.Markdown,
                formatting: {
                    horizontalAlign: 'flex-start',
                    verticalAlign: 'flex-start',
                    bold: false,
                    italic: false,
                    underline: false,
                    strikethrough: false,
                },
                appearance: {
                    font: {
                        family: 'Arial',
                        weight: 400,
                        size: 16,
                        lineHeight: 1,
                    },
                    color: '#000000',
                },
            };
        default:
            return {};
    }
};
const getDefaultChartConfig = (chartType, columns) => {
    const baseConfig = {
        dataSource: WidgetDataSourceTypes.MODEL,
    };
    // Helper function to get the best column for category field
    const getDefaultCategoryColumn = (columns) => {
        var _a;
        if (!columns || (columns === null || columns === void 0 ? void 0 : columns.length) === 0)
            return '';
        // Priority 1: SingleSelect
        const singleSelectColumn = columns.find((col) => col.uidt === UITypes.SingleSelect);
        if (singleSelectColumn)
            return singleSelectColumn.id;
        // Priority 2: SingleLineText
        const singleLineTextColumn = columns.find((col) => col.uidt === UITypes.SingleLineText);
        if (singleLineTextColumn)
            return singleLineTextColumn.id;
        // Fallback: first column
        return ((_a = columns[0]) === null || _a === void 0 ? void 0 : _a.id) || '';
    };
    switch (chartType) {
        case ChartTypes.PIE:
            return Object.assign(Object.assign({}, baseConfig), { chartType: ChartTypes.PIE, data: {
                    category: {
                        column_id: getDefaultCategoryColumn(columns),
                        orderBy: 'default',
                        includeEmptyRecords: false,
                    },
                    value: {
                        type: 'count',
                    },
                }, appearance: {
                    size: 'medium',
                    showCountInLegend: true,
                    showPercentageOnChart: true,
                    legendPosition: 'right',
                    colorSchema: 'default',
                    customColorSchema: [],
                }, permissions: {
                    allowUserToPrint: true,
                    allowUsersToViewRecords: false,
                } });
        case ChartTypes.DONUT:
            return Object.assign(Object.assign({}, baseConfig), { chartType: ChartTypes.DONUT, data: {
                    category: {
                        column_id: getDefaultCategoryColumn(columns),
                        orderBy: 'default',
                        includeEmptyRecords: false,
                    },
                    value: {
                        type: 'count',
                    },
                }, appearance: {
                    size: 'medium',
                    showCountInLegend: true,
                    showPercentageOnChart: true,
                    legendPosition: 'right',
                    colorSchema: 'default',
                    customColorSchema: [],
                }, permissions: {
                    allowUserToPrint: true,
                    allowUsersToViewRecords: false,
                } });
        default:
            return Object.assign(Object.assign({}, baseConfig), { chartType });
    }
};
export { getDefaultConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0VXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2Rhc2hib2FyZC93aWRnZXRVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsVUFBVSxFQUNWLGVBQWUsRUFDZixxQkFBcUIsRUFFckIsV0FBVyxHQUNaLE1BQU0sR0FBRyxDQUFDO0FBQ1gsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE9BQU8sQ0FBQztBQUU1QyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUNuQyxlQUE2QixFQUM3QixtQkFBNkMsRUFDN0MsY0FBc0IsQ0FBQyxFQUN2QixFQUFFO0lBQ0YsSUFBSSxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ2pDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLG1CQUFtQixDQUFDO0lBRWpELHFDQUFxQztJQUNyQyxJQUFJLElBQUksR0FBRyxXQUFXLEVBQUUsQ0FBQztRQUN2QixPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVELDREQUE0RDtJQUM1RCxNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBdUIsQ0FBQztJQUM1QyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFFYiwyQkFBMkI7SUFDM0IsS0FBSyxNQUFNLE1BQU0sSUFBSSxlQUFlLEVBQUUsQ0FBQztRQUNyQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUN2QyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxD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