"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultConfig = exports.calculateNextPosition = void 0;
const _1 = require(".");
const lib_1 = require("../../lib");
const calculateNextPosition = (existingWidgets, newWidgetDimensions, gridColumns = 4) => {
    if (existingWidgets.length === 0) {
        return { x: 0, y: 0 };
    }
    const { w: newW, h: newH } = newWidgetDimensions;
    // Early return if widget is too wide
    if (newW > gridColumns) {
        return { x: 0, y: 0 };
    }
    // Create a 2D grid to track occupied cells more efficiently
    const grid = new Map();
    let maxY = 0;
    // Build the occupation map
    for (const widget of existingWidgets) {
        const { x, y, w, h } = widget.position;
        const endY = y + h;
        maxY = Math.max(maxY, endY);
        for (let row = y; row < endY; row++) {
            if (!grid.has(row)) {
                grid.set(row, new Set());
            }
            const rowSet = grid.get(row);
            for (let col = x; col < x + w; col++) {
                rowSet.add(col);
            }
        }
    }
    // position checking
    const isPositionAvailable = (x, y) => {
        for (let row = y; row < y + newH; row++) {
            const rowSet = grid.get(row);
            if (rowSet) {
                for (let col = x; col < x + newW; col++) {
                    if (rowSet.has(col))
                        return false;
                }
            }
        }
        return true;
    };
    // Find the first available position, scanning row by row
    const maxX = gridColumns - newW;
    for (let y = 0; y <= maxY + 1; y++) {
        for (let x = 0; x <= maxX; x++) {
            if (isPositionAvailable(x, y)) {
                return { x, y };
            }
        }
    }
    // Fallback: place at bottom-left
    return { x: 0, y: maxY };
};
exports.calculateNextPosition = calculateNextPosition;
const getDefaultConfig = (widgetType, chartType, columns) => {
    switch (widgetType) {
        case _1.WidgetTypes.METRIC:
            return {
                dataSource: _1.WidgetDataSourceTypes.MODEL,
                metric: {
                    type: 'count',
                    aggregation: 'count',
                },
                appearance: {
                    type: 'filled',
                    theme: 'purple',
                },
            };
        case _1.WidgetTypes.CHART:
            return getDefaultChartConfig(chartType, columns);
        case _1.WidgetTypes.TEXT:
            return {
                content: 'Enter text here',
                type: _1.TextWidgetTypes.Markdown,
                formatting: {
                    horizontalAlign: 'flex-start',
                    verticalAlign: 'flex-start',
                    bold: false,
                    italic: false,
                    underline: false,
                    strikethrough: false,
                },
                appearance: {
                    font: {
                        family: 'Arial',
                        weight: 400,
                        size: 16,
                        lineHeight: 1,
                    },
                    color: '#000000',
                },
            };
        default:
            return {};
    }
};
exports.getDefaultConfig = getDefaultConfig;
const getDefaultChartConfig = (chartType, columns) => {
    const baseConfig = {
        dataSource: _1.WidgetDataSourceTypes.MODEL,
    };
    // Helper function to get the best column for category field
    const getDefaultCategoryColumn = (columns) => {
        var _a;
        if (!columns || (columns === null || columns === void 0 ? void 0 : columns.length) === 0)
            return '';
        // Priority 1: SingleSelect
        const singleSelectColumn = columns.find((col) => col.uidt === lib_1.UITypes.SingleSelect);
        if (singleSelectColumn)
            return singleSelectColumn.id;
        // Priority 2: SingleLineText
        const singleLineTextColumn = columns.find((col) => col.uidt === lib_1.UITypes.SingleLineText);
        if (singleLineTextColumn)
            return singleLineTextColumn.id;
        // Fallback: first column
        return ((_a = columns[0]) === null || _a === void 0 ? void 0 : _a.id) || '';
    };
    switch (chartType) {
        case _1.ChartTypes.PIE:
            return Object.assign(Object.assign({}, baseConfig), { chartType: _1.ChartTypes.PIE, data: {
                    category: {
                        column_id: getDefaultCategoryColumn(columns),
                        orderBy: 'default',
                        includeEmptyRecords: false,
                    },
                    value: {
                        type: 'count',
                    },
                }, appearance: {
                    size: 'medium',
                    showCountInLegend: true,
                    showPercentageOnChart: true,
                    legendPosition: 'right',
                    colorSchema: 'default',
                    customColorSchema: [],
                }, permissions: {
                    allowUserToPrint: true,
                    allowUsersToViewRecords: false,
                } });
        case _1.ChartTypes.DONUT:
            return Object.assign(Object.assign({}, baseConfig), { chartType: _1.ChartTypes.DONUT, data: {
                    category: {
                        column_id: getDefaultCategoryColumn(columns),
                        orderBy: 'default',
                        includeEmptyRecords: false,
                    },
                    value: {
                        type: 'count',
                    },
                }, appearance: {
                    size: 'medium',
                    showCountInLegend: true,
                    showPercentageOnChart: true,
                    legendPosition: 'right',
                    colorSchema: 'default',
                    customColorSchema: [],
                }, permissions: {
                    allowUserToPrint: true,
                    allowUsersToViewRecords: false,
                } });
        default:
            return Object.assign(Object.assign({}, baseConfig), { chartType });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2lkZ2V0VXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2Rhc2hib2FyZC93aWRnZXRVdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSx3QkFNVztBQUNYLCtCQUE0QztBQUVyQyxNQUFNLHFCQUFxQixHQUFHLENBQ25DLGVBQTZCLEVBQzdCLG1CQUE2QyxFQUM3QyxjQUFzQixDQUFDLEVBQ3ZCLEVBQUU7SUFDRixJQUFJLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDakMsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEdBQUcsbUJBQW1CLENBQUM7SUFFakQscUNBQXFDO0lBQ3JDLElBQUksSUFBSSxHQUFHLFdBQVcsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsNERBQTREO0lBQzVELE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUF1QixDQUFDO0lBQzVDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztJQUViLDJCQUEyQjtJQUMzQixLQUFLLE1BQU0sTUFBTSxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTVCLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxF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