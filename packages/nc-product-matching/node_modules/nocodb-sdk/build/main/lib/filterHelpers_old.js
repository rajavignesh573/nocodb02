"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IS_WITHIN_COMPARISON_SUB_OPS = exports.GROUPBY_COMPARISON_OPS = exports.COMPARISON_SUB_OPS = exports.COMPARISON_OPS = void 0;
exports.extractFilterFromXwhere = extractFilterFromXwhere;
exports.validateFilterComparison = validateFilterComparison;
exports.extractCondition = extractCondition;
const errorUtils_1 = require("../lib/errorUtils");
const index_1 = require("../lib/index");
var query_filter_lexer_1 = require("../lib/parser/queryFilter/query-filter-lexer");
Object.defineProperty(exports, "COMPARISON_OPS", { enumerable: true, get: function () { return query_filter_lexer_1.COMPARISON_OPS; } });
Object.defineProperty(exports, "COMPARISON_SUB_OPS", { enumerable: true, get: function () { return query_filter_lexer_1.COMPARISON_SUB_OPS; } });
Object.defineProperty(exports, "GROUPBY_COMPARISON_OPS", { enumerable: true, get: function () { return query_filter_lexer_1.GROUPBY_COMPARISON_OPS; } });
Object.defineProperty(exports, "IS_WITHIN_COMPARISON_SUB_OPS", { enumerable: true, get: function () { return query_filter_lexer_1.IS_WITHIN_COMPARISON_SUB_OPS; } });
function extractFilterFromXwhere(str, aliasColObjMap, throwErrorIfInvalid = false, errors = []) {
    if (!str) {
        return { filters: [] };
    }
    // if array treat it as `and` group
    if (Array.isArray(str)) {
        const nestedFilters = str.map((s) => extractFilterFromXwhere(s, aliasColObjMap, throwErrorIfInvalid, errors));
        const filters = nestedFilters.reduce((acc, { filters }) => {
            if (!filters)
                return acc;
            return [...acc, ...filters];
        }, []);
        const collectedErrors = nestedFilters.reduce((acc, { errors }) => {
            if (!errors)
                return acc;
            return [...acc, ...errors];
        }, []);
        // If errors exist, return them
        if (collectedErrors.length > 0) {
            return { errors: collectedErrors };
        }
        // If there's only one filter, return it directly
        if (filters.length === 1) {
            return { filters };
        }
        // If there's only one filter, return it directly; otherwise, wrap in an AND group
        return {
            filters: [
                {
                    is_group: true,
                    logical_op: 'and',
                    children: filters,
                },
            ],
        };
    }
    // Validate input type
    if (typeof str !== 'string') {
        const error = {
            message: 'Invalid filter format. Expected string or array of strings.',
        };
        if (throwErrorIfInvalid)
            throw new Error(error.message);
        errors.push(error);
        return { errors };
    }
    let openIndex = str.indexOf('((');
    if (openIndex === -1)
        openIndex = str.indexOf('(~');
    // If it's a simple query, extract conditions directly
    if (openIndex === -1) {
        if (str !== '~not') {
            const nestedArrayConditions = str.split(/(?=~(?:or(?:not)?|and(?:not)?|not)\()/);
            return extractCondition(nestedArrayConditions, aliasColObjMap, throwErrorIfInvalid, errors);
        }
        return { filters: [] };
    }
    let closingIndex = str.indexOf('))');
    let nextOpenIndex = openIndex;
    // Iterate until the correct closing bracket is found
    while ((nextOpenIndex = str
        .substring(0, closingIndex)
        .indexOf('((', nextOpenIndex + 1)) !== -1) {
        closingIndex = str.indexOf('))', closingIndex + 1);
    }
    // If no closing bracket is found, return an error
    if (closingIndex === -1) {
        const error = {
            message: `${str
                .substring(0, openIndex + 1)
                .slice(-10)} : Closing bracket not found`,
        };
        if (throwErrorIfInvalid)
            throw new Error(error.message);
        errors.push(error);
        return { errors };
    }
    // Extract operator and left-hand side of nested query
    const operandStartIndex = str.lastIndexOf('~', openIndex);
    const operator = operandStartIndex !== -1
        ? str.substring(operandStartIndex + 1, openIndex)
        : '';
    const lhsOfNestedQuery = str.substring(0, openIndex);
    // Recursively process left-hand side, nested query, and right-hand side
    const lhsResult = extractFilterFromXwhere(lhsOfNestedQuery, aliasColObjMap, throwErrorIfInvalid, errors);
    const nestedQueryResult = extractFilterFromXwhere(str.substring(openIndex + 1, closingIndex + 1), aliasColObjMap, throwErrorIfInvalid, errors);
    const rhsResult = extractFilterFromXwhere(str.substring(closingIndex + 2), aliasColObjMap, throwErrorIfInvalid, errors);
    // If any errors occurred during recursion, return them
    if (lhsResult.errors || nestedQueryResult.errors || rhsResult.errors) {
        return {
            errors: [
                ...(lhsResult.errors || []),
                ...(nestedQueryResult.errors || []),
                ...(rhsResult.errors || []),
            ],
        };
    }
    // Return the combined filters
    return {
        filters: [
            ...(lhsResult.filters || []),
            {
                is_group: true,
                logical_op: operator,
                children: nestedQueryResult.filters || [],
            },
            ...(rhsResult.filters || []),
        ],
    };
}
/**
 * Validates a filter comparison operation and its sub-operation.
 *
 * @param {UITypes} uidt - The UI type to validate against.
 * @param {any} op - The main comparison operator.
 * @param {any} [sub_op] - The optional sub-operation.
 * @param {FilterParseError[]} [errors=[]] - An optional array to collect errors.
 * @returns {FilterParseError[]} - An array of validation errors, empty if no errors.
 *
 * This function checks if the given `op` is a valid comparison operator and, if a `sub_op` is provided,
 * ensures it is compatible with the given `uidt`. If any validation fails, errors are added to the array
 * and returned instead of throwing an exception.
 */
function validateFilterComparison(uidt, op, sub_op, errors = [], validateFilterComparison = false) {
    // Check if the main comparison operator is valid
    if (!index_1.COMPARISON_OPS.includes(op) && !index_1.GROUPBY_COMPARISON_OPS.includes(op)) {
        if (validateFilterComparison) {
            throw new errorUtils_1.BadRequest(`${op} is not supported.`);
        }
        errors.push({ message: `${op} is not supported.` });
    }
    if (sub_op) {
        // Ensure that sub-operators are only used with specific UI types
        if (![
            index_1.UITypes.Date,
            index_1.UITypes.DateTime,
            index_1.UITypes.CreatedTime,
            index_1.UITypes.LastModifiedTime,
        ].includes(uidt)) {
            if (validateFilterComparison) {
                throw new errorUtils_1.BadRequest(`'${sub_op}' is not supported for UI Type'${uidt}'.`);
            }
            errors.push({
                message: `'${sub_op}' is not supported for UI Type '${uidt}'.`,
            });
        }
        // Validate if the sub-operator exists in the allowed set
        if (!index_1.COMPARISON_SUB_OPS.includes(sub_op)) {
            if (validateFilterComparison) {
                throw new errorUtils_1.BadRequest(`'${sub_op}' is not supported.`);
            }
            errors.push({ message: `'${sub_op}' is not supported.` });
        }
        // Ensure `isWithin` has correct sub-operators, and other operators don't use `isWithin` sub-operators
        if ((op === 'isWithin' && !index_1.IS_WITHIN_COMPARISON_SUB_OPS.includes(sub_op)) ||
            (op !== 'isWithin' && index_1.IS_WITHIN_COMPARISON_SUB_OPS.includes(sub_op))) {
            if (validateFilterComparison) {
                throw new errorUtils_1.BadRequest(`'${sub_op}' is not supported for '${op}'`);
            }
            errors.push({ message: `'${sub_op}' is not supported for '${op}'.` });
        }
    }
    // Return collected errors, if any
    return errors.length > 0 ? errors : [];
}
function extractCondition(nestedArrayConditions, aliasColObjMap, throwErrorIfInvalid, errors) {
    if (!nestedArrayConditions || nestedArrayConditions.length === 0) {
        return { filters: [] };
    }
    const parsedFilters = nestedArrayConditions
        .map((str) => {
        var _a, _b, _c;
        let logicOp;
        let alias;
        let op;
        let value;
        [logicOp, alias, op, value] =
            ((_a = str.match(/(?:~(and|or|not))?\((.*?),(\w+),(.*)\)/)) === null || _a === void 0 ? void 0 : _a.slice(1)) || [];
        if (!alias && !op && !value) {
            // Attempt to match blank filter format
            [logicOp, alias, op, value] =
                ((_b = str.match(/(?:~(and|or|not))?\((.*?),(\w+)\)/)) === null || _b === void 0 ? void 0 : _b.slice(1)) || [];
        }
        // Normalize filter operations
        switch (op) {
            case 'is':
                if (value === 'blank') {
                    op = 'blank';
                    value = undefined;
                }
                else if (value === 'notblank') {
                    op = 'notblank';
                    value = undefined;
                }
                break;
            case 'isblank':
            case 'is_blank':
                op = 'blank';
                break;
            case 'isnotblank':
            case 'is_not_blank':
            case 'is_notblank':
                op = 'notblank';
                break;
        }
        let sub_op = null;
        if (aliasColObjMap[alias]) {
            const columnType = aliasColObjMap[alias].uidt;
            // Handle date and datetime values
            if ([
                index_1.UITypes.Date,
                index_1.UITypes.DateTime,
                index_1.UITypes.LastModifiedTime,
                index_1.UITypes.CreatedTime,
            ].includes(columnType)) {
                value = value === null || value === void 0 ? void 0 : value.split(',');
                sub_op = value === null || value === void 0 ? void 0 : value.shift();
                value = value === null || value === void 0 ? void 0 : value[0];
                if (sub_op === 'null') {
                    sub_op = undefined;
                    value = null;
                }
            }
            else if (op === 'in') {
                value = value.split(',');
            }
            validateFilterComparison(columnType, op, sub_op, errors, throwErrorIfInvalid);
        }
        else {
            const error = {
                message: alias
                    ? `Column alias '${alias}' not found.`
                    : 'Invalid filter format.',
            };
            if (throwErrorIfInvalid)
                throw new errorUtils_1.NcSDKError(error.message);
            errors.push(error);
            return null;
        }
        let columnId = (_c = aliasColObjMap[alias]) === null || _c === void 0 ? void 0 : _c.id;
        // If alias is not found, check if it matches a column ID directly
        if (!columnId &&
            Object.values(aliasColObjMap).some((col) => (col === null || col === void 0 ? void 0 : col.id) === alias)) {
            columnId = alias;
        }
        return Object.assign(Object.assign({ comparison_op: op }, (sub_op && {
            comparison_sub_op: sub_op,
        })), { fk_column_id: columnId, logical_op: logicOp, value });
    })
        .filter(Boolean);
    if (errors.length > 0) {
        return { errors };
    }
    return { filters: parsedFilters };
}
//# sourceMappingURL=data:application/json;base64,