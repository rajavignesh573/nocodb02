export declare enum FormBuilderInputType {
    Input = "input",
    Select = "select",
    Switch = "switch",
    Space = "space",
    Password = "password",
    SelectIntegration = "integration",
    SelectBase = "select-base",
    OAuth = "oauth"
}
export interface FormBuilderCondition {
    model: string;
    value?: string;
    equal?: string;
    in?: string[];
    empty?: boolean;
    notEmpty?: boolean;
}
export declare enum FormBuilderValidatorType {
    Required = "required"
}
export interface FormBuilderElement {
    type: FormBuilderInputType;
    model?: string;
    defaultValue?: string[] | string | boolean | number | null;
    label?: string;
    placeholder?: string;
    width?: number;
    category?: string;
    options?: {
        value: string;
        label: string;
    }[];
    selectMode?: 'single' | 'multiple' | 'multipleWithInput';
    integrationFilter?: {
        type?: string;
        sub_type?: string;
    };
    oauthMeta?: {
        provider: string;
        authUri: string;
        redirectUri: string;
        clientId: string;
        codeKey?: string;
        scopes?: string[];
    };
    condition?: FormBuilderCondition | FormBuilderCondition[];
    border?: boolean;
    showHintAsTooltip?: boolean;
    validators?: {
        type: FormBuilderValidatorType;
        message?: string;
    }[];
    fetchOptionsKey?: string;
}
export type FormDefinition = FormBuilderElement[];
export declare const FORM_BUILDER_NON_CATEGORIZED = "form-builder-non-categorized";
