"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppendToLengthSuffix = void 0;
exports.getRowColPositionFromIndex = getRowColPositionFromIndex;
exports.appendToLength = appendToLength;
exports.truncateToLength = truncateToLength;
exports.generateUniqueCopyName = generateUniqueCopyName;
exports.escapeRegexString = escapeRegexString;
const is_1 = require("./is");
const AppendToLengthSuffixConfig = {
    _: {
        replacement: '___{index}',
        replacementRegex: /___\s?(\d*)$/,
    },
    dot: {
        replacement: '...{index}',
        replacementRegex: /\.\.\.\s?(\d*)$/,
    },
};
var AppendToLengthSuffix;
(function (AppendToLengthSuffix) {
    AppendToLengthSuffix["_"] = "_";
    AppendToLengthSuffix["dot"] = "dot";
})(AppendToLengthSuffix || (exports.AppendToLengthSuffix = AppendToLengthSuffix = {}));
/**
 * get a row & column given a numeric position
 * row & column start at 0
 */
function getRowColPositionFromIndex({ stack, position, }) {
    const parts = stack.substring(0, position).split('\n');
    return {
        column: parts[parts.length - 1].length,
        row: parts.length - 1,
    };
}
async function appendToLength(param) {
    var _a, _b;
    const { value, appendage, maxLength, isExists } = param;
    const suffixConfig = AppendToLengthSuffixConfig[(_a = param.suffix) !== null && _a !== void 0 ? _a : AppendToLengthSuffix.dot];
    // if it's already in the form of truncated
    // skip with usual append
    if ((value + appendage).length > maxLength) {
        const existingIndex = (_b = value.match(suffixConfig.replacementRegex)) === null || _b === void 0 ? void 0 : _b[1];
        return truncateToLength({
            value,
            maxLength,
            currentIndex: !(0, is_1.ncIsUndefined)(existingIndex) && existingIndex !== ''
                ? Number(existingIndex)
                : undefined,
            isExists,
            suffix: param.suffix,
        });
    }
    let currentIndex = 1;
    let needle = value + appendage;
    while (await isExists(needle)) {
        needle = value + appendage + '_' + currentIndex++;
        if (needle.length >= maxLength) {
            return appendToLength(Object.assign(Object.assign({}, param), { appendage: appendage + '_' + currentIndex++, suffix: param.suffix }));
        }
    }
    return needle;
}
async function truncateToLength(param) {
    var _a;
    const { value, currentIndex, maxLength, isExists } = param;
    const suffixConfig = AppendToLengthSuffixConfig[(_a = param.suffix) !== null && _a !== void 0 ? _a : AppendToLengthSuffix.dot];
    const replacement = (0, is_1.ncIsUndefined)(currentIndex) ? '' : `${currentIndex}`;
    const suffix = suffixConfig.replacement.replace('{index}', replacement);
    const needle = value.substring(0, maxLength - suffix.length) + suffix;
    if (!(await isExists(needle))) {
        return needle;
    }
    else {
        return truncateToLength(Object.assign(Object.assign({}, param), { currentIndex: (0, is_1.ncIsUndefined)(currentIndex) ? 2 : currentIndex + 1 }));
    }
}
/**
 * Generates a unique copy name by checking against existing names/items
 */
function generateUniqueCopyName(originalName, existing, options = {}) {
    const { accessor, prefix = 'Copy of', separator = ' ', counterFormat = '({counter})', } = options;
    // Extract names from the existing array
    const existingNames = existing.map((item) => {
        if (typeof item === 'string')
            return item;
        if (accessor) {
            return typeof accessor === 'function'
                ? accessor(item)
                : String(item[accessor]);
        }
        // Default to 'title' property if no accessor specified
        return String(item.title);
    });
    let newName = `${prefix} ${originalName}`;
    let counter = 1;
    while (existingNames.includes(newName)) {
        const counterText = counterFormat.replace('{counter}', counter.toString());
        newName = `${prefix} ${originalName}${separator}${counterText}`;
        counter++;
    }
    return newName;
}
function escapeRegexString(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nSGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvc3RyaW5nSGVscGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFxQkEsZ0VBWUM7QUFFRCx3Q0EwQ0M7QUFFRCw0Q0FxQkM7QUFLRCx3REEyQ0M7QUFFRCw4Q0FFQztBQXhKRCw2QkFBcUM7QUFFckMsTUFBTSwwQkFBMEIsR0FBRztJQUNqQyxDQUFDLEVBQUU7UUFDRCxXQUFXLEVBQUUsWUFBWTtRQUN6QixnQkFBZ0IsRUFBRSxjQUFjO0tBQ2pDO0lBQ0QsR0FBRyxFQUFFO1FBQ0gsV0FBVyxFQUFFLFlBQVk7UUFDekIsZ0JBQWdCLEVBQUUsaUJBQWlCO0tBQ3BDO0NBQ0YsQ0FBQztBQUNGLElBQVksb0JBR1g7QUFIRCxXQUFZLG9CQUFvQjtJQUM5QiwrQkFBTyxDQUFBO0lBQ1AsbUNBQVcsQ0FBQTtBQUNiLENBQUMsRUFIVyxvQkFBb0Isb0NBQXBCLG9CQUFvQixRQUcvQjtBQUVEOzs7R0FHRztBQUNILFNBQWdCLDBCQUEwQixDQUFDLEVBQ3pDLEtBQUssRUFDTCxRQUFRLEdBSVQ7SUFDQyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkQsT0FBTztRQUNMLE1BQU0sRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNO1FBQ3RDLEdBQUcsRUFBRSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUM7S0FDdEIsQ0FBQztBQUNKLENBQUM7QUFFTSxLQUFLLFVBQVUsY0FBYyxDQUFDLEtBTXBDOztJQUNDLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDeEQsTUFBTSxZQUFZLEdBQ2hCLDBCQUEwQixDQUFDLE1B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