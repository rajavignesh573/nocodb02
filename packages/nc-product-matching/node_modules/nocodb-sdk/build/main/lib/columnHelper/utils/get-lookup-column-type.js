"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLookupColumnType = getLookupColumnType;
const UITypes_1 = __importDefault(require("../../../lib/UITypes"));
function getLookupColumnType({ col, meta, metas, visitedIds = new Set(), }) {
    var _a, _b;
    const colOptions = col.colOptions;
    const relationColumnOptions = colOptions.fk_relation_column_id
        ? (_b = (_a = meta === null || meta === void 0 ? void 0 : meta.columns) === null || _a === void 0 ? void 0 : _a.find((c) => c.id === colOptions.fk_relation_column_id)) === null || _b === void 0 ? void 0 : _b.colOptions
        : null;
    const relatedTableMeta = (relationColumnOptions === null || relationColumnOptions === void 0 ? void 0 : relationColumnOptions.fk_related_model_id) &&
        (metas === null || metas === void 0 ? void 0 : metas[relationColumnOptions.fk_related_model_id]);
    const childColumn = relatedTableMeta === null || relatedTableMeta === void 0 ? void 0 : relatedTableMeta.columns.find((c) => c.id === colOptions.fk_lookup_column_id);
    // if child column is lookup column, then recursively find the column type
    // and check for circular dependency
    if (childColumn &&
        childColumn.uidt === UITypes_1.default.Lookup &&
        !visitedIds.has(childColumn.id)) {
        visitedIds.add(childColumn.id);
        return getLookupColumnType({
            col: childColumn,
            meta: relatedTableMeta,
            metas: metas,
            visitedIds: visitedIds,
        });
    }
    return (childColumn === null || childColumn === void 0 ? void 0 : childColumn.uidt) || null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0LWxvb2t1cC1jb2x1bW4tdHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29sdW1uSGVscGVyL3V0aWxzL2dldC1sb29rdXAtY29sdW1uLXR5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSxrREF5Q0M7QUEzQ0QsNERBQW9DO0FBRXBDLFNBQWdCLG1CQUFtQixDQUFDLEVBQ2xDLEdBQUcsRUFDSCxJQUFJLEVBQ0osS0FBSyxFQUNMLFVBQVUsR0FBRyxJQUFJLEdBQUcsRUFBVSxHQU0vQjs7SUFDQyxNQUFNLFVBQVUsR0FBRyxHQUFHLENBQUMsVUFBd0IsQ0FBQztJQUNoRCxNQUFNLHFCQUFxQixHQUFRLFVBQVUsQ0FBQyxxQkFBcUI7UUFDakUsQ0FBQyxDQUFDLE1BQUEsTUFBQSxJQUFJLGFBQUosSUFBSSx1QkFBSixJQUFJLENBQUUsT0FBTywwQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssVUFBVSxDQUFDLHFCQUFxQixDQUFDLDBDQUNqRSxVQUFVO1FBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDVCxNQUFNLGdCQUFnQixHQUNwQixDQUFBLHFCQUFxQixhQUFyQixxQkFBcUIsdUJBQXJCLHFCQUFxQixDQUFFLG1CQUFtQjtTQUMxQyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUcscUJBQXFCLENBQUMsbUJBQTZCLENBQUMsQ0FBQSxDQUFDO0lBRS9ELE1BQU0sV0FBVyxHQUFHLGdCQUFnQixhQUFoQixnQkFBZ0IsdUJBQWhCLGdCQUFnQixDQUFFLE9BQU8sQ0FBQyxJQUFJLENBQ2hELENBQUMsQ0FBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLFVBQVUsQ0FBQyxtQkFBbUIsQ0FDakMsQ0FBQztJQUU1QiwwRUFBMEU7SUFDMUUsb0NBQW9DO0lBQ3BDLElBQ0UsV0FBVztRQUNYLFdBQVcsQ0FBQyxJQUFJLEtBQUssaUJBQU8sQ0FBQyxNQUFNO1FBQ25DLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLEVBQy9CLENBQUM7UUFDRCxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvQixPQUFPLG1CQUFtQixDQUFDO1lBQ3pCLEdBQUcsRUFBRSxXQUFXO1lBQ2hCLElBQUksRUFBRSxnQkFBZ0I7WUFDdEIsS0FBSyxFQUFFLEtBQUs7WUFDWixVQUFVLEVBQUUsVUFBVTtTQUN2QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxDQUFDLFdBQVcsYUFBWCxXQUFXLHVCQUFYLFdBQVcsQ0FBRSxJQUFnQixLQUFJLElBQUksQ0FBQztBQUNoRCxDQUFDIn0=