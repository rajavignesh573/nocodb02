"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColumnHelper = exports.ColumnHelperClass = void 0;
const is_1 = require("../is");
const UITypes_1 = __importDefault(require("../UITypes"));
const columns_1 = require("./columns");
const SingleSelect_1 = require("./columns/SingleSelect");
class ColumnHelperClass {
    constructor() {
        this.defautlHelper = 'defautlHelper';
        this.registry = {
            [this.defautlHelper]: columns_1.DefaultColumnHelper,
            [UITypes_1.default.SingleLineText]: columns_1.SingleLineTextHelper,
            [UITypes_1.default.LongText]: columns_1.LongTextHelper,
            [UITypes_1.default.Number]: columns_1.NumberHelper,
            [UITypes_1.default.Decimal]: columns_1.DecimalHelper,
            [UITypes_1.default.Currency]: columns_1.CurrencyHelper,
            [UITypes_1.default.Duration]: columns_1.DurationHelper,
            [UITypes_1.default.Percent]: columns_1.PercentHelper,
            [UITypes_1.default.Checkbox]: columns_1.CheckboxHelper,
            [UITypes_1.default.Rating]: columns_1.RatingHelper,
            [UITypes_1.default.PhoneNumber]: columns_1.PhoneNumberHelper,
            [UITypes_1.default.Email]: columns_1.EmailHelper,
            [UITypes_1.default.URL]: columns_1.UrlHelper,
            [UITypes_1.default.JSON]: columns_1.JsonHelper,
            [UITypes_1.default.GeoData]: columns_1.GeoDataHelper,
            [UITypes_1.default.Barcode]: columns_1.BarcodeHelper,
            [UITypes_1.default.QrCode]: columns_1.QrCodeHelper,
            [UITypes_1.default.Formula]: columns_1.FormulaHelper,
            [UITypes_1.default.Date]: columns_1.DateHelper,
            [UITypes_1.default.DateTime]: columns_1.DateTimeHelper,
            [UITypes_1.default.Time]: columns_1.TimeHelper,
            [UITypes_1.default.Year]: columns_1.YearHelper,
            [UITypes_1.default.CreatedTime]: columns_1.CreatedTimeHelper,
            [UITypes_1.default.LastModifiedTime]: columns_1.LastModifiedTimeHelper,
            [UITypes_1.default.SingleSelect]: SingleSelect_1.SingleSelectHelper,
            [UITypes_1.default.MultiSelect]: columns_1.MultiSelectHelper,
            [UITypes_1.default.User]: columns_1.UserHelper,
            [UITypes_1.default.Attachment]: columns_1.AttachmentHelper,
            [UITypes_1.default.CreatedBy]: columns_1.UserHelper,
            [UITypes_1.default.LastModifiedBy]: columns_1.UserHelper,
            [UITypes_1.default.Lookup]: columns_1.LookupHelper,
            [UITypes_1.default.Rollup]: columns_1.RollupHelper,
            [UITypes_1.default.Links]: columns_1.LinksHelper,
            [UITypes_1.default.LinkToAnotherRecord]: columns_1.LTARHelper,
            [UITypes_1.default.Button]: columns_1.ButtonHelper,
        };
    }
    // Method to retrieve the specific column class and instantiate it
    getColumn(params) {
        let ColumnClass;
        if ((0, is_1.ncIsString)(params)) {
            ColumnClass = this.registry[params] || this.registry[this.defautlHelper];
        }
        else {
            if (!params.col || !this.registry[params.col.uidt]) {
                ColumnClass = this.registry[this.defautlHelper];
            }
            else {
                ColumnClass = this.registry[params.col.uidt];
            }
        }
        // Instantiate the class with the column data
        return new ColumnClass();
    }
    getColumnDefaultMeta(uidt) {
        const columnInstance = this.getColumn(uidt);
        if (columnInstance) {
            return columnInstance.columnDefaultMeta || {};
        }
        return {};
    }
    /**
     * Parses a stored value back into its original form.
     * Converts a database-stored value into a display-friendly format.
     *
     * @example
     * // Example: Formatting percentage values
     * dbValue = 59; // Stored in DB
     * displayValue = "59%"; // Displayed to users
     *
     * @param value - The value to be parsed from storage format.
     * @param params - Additional parameters related to column parsing.
     * @returns The parsed value in a display-friendly format.
     */
    parseValue(value, params) {
        const columnInstance = this.getColumn(params);
        if (columnInstance) {
            return columnInstance.parseValue(value, params);
        }
    }
    /**
     * Serializes the given value based on column parameters.
     *
     * **WARNING:** This method **can throw errors**. Use a `try-catch` block when calling it.
     *
     * @param value - The value to be serialized.
     * @param params - Additional parameters related to column serialization.
     * @returns The serialized value.
     * @throws {Error} If serialization fails.
     */
    serializeValue(value, params) {
        const columnInstance = this.getColumn(params);
        if (columnInstance) {
            return columnInstance.serializeValue(value, params);
        }
    }
    /**
     * Parses a plain cell value back into its original form.
     * Converts a plain cell value into a display-friendly format.
     *
     * @param value - The value to be parsed from storage format.
     * @param params - Additional parameters related to column parsing.
     * @returns The parsed value in a display-friendly format.
     */
    parsePlainCellValue(value, params) {
        const columnInstance = this.getColumn(params);
        if (columnInstance) {
            return columnInstance.parsePlainCellValue(value, params);
        }
        return value;
    }
    populateFillHandle(params) {
        const columnInstance = this.getColumn({
            col: params.column,
        });
        if (columnInstance) {
            return columnInstance.populateFillHandle(params);
        }
        return undefined;
    }
}
exports.ColumnHelperClass = ColumnHelperClass;
exports.ColumnHelper = new ColumnHelperClass();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1uLWhlbHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY29sdW1uSGVscGVyL2NvbHVtbi1oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsOEJBQW1DO0FBQ25DLHlEQUFpQztBQUlqQyx1Q0FpQ21CO0FBQ25CLHlEQUE0RDtBQUU1RCxNQUFhLGlCQUFpQjtJQUE5QjtRQUNFLGtCQUFhLEdBQUcsZUFBZSxDQUFDO1FBRXhCLGFBQVEsR0FBbUQ7WUFDakUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsNkJBQW1CO1lBQ3pDLENBQUMsaUJBQU8sQ0FBQyxjQUFjLENBQUMsRUFBRSw4QkFBb0I7WUFDOUMsQ0FBQyxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLHdCQUFjO1lBQ2xDLENBQUMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxzQkFBWTtZQUM5QixDQUFDLGlCQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsdUJBQWE7WUFDaEMsQ0FBQyxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLHdCQUFjO1lBQ2xDLENBQUMsaUJBQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSx3QkFBYztZQUNsQyxDQUFDLGlCQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsdUJBQWE7WUFDaEMsQ0FBQyxpQkFBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLHdCQUFjO1lBQ2xDLENBQUMsaUJBQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxzQkFBWTtZQUM5QixDQUFDLGlCQUFPLENBQUMsV0FBVyxDQUFDLEVBQUUsMkJBQWlCO1lBQ3hDLENBQUMsaUJBQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxxQkFBVztZQUM1QixDQUFDLGlCQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsbUJBQVM7WUFDeEIsQ0FBQyxpQkFBTyxDQUFDLElBQUksQ0FBQyxFQUFFLG9CQUFVO1lBQzFCLENBQUMsaUJBQU8sQ0FBQyxPQUFPLENB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