"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLinksValue = exports.parseUserValue = exports.parseYearValue = exports.parseTimeValue = exports.parseCurrencyValue = exports.parseJsonValue = exports.parseCheckboxValue = exports.parseDurationValue = exports.parsePercentValue = exports.parseDecimalValue = exports.parseIntValue = exports.parseDefault = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const durationUtils_1 = require("../../../lib/durationUtils");
const helperFunctions_1 = require("../../../lib/helperFunctions");
const is_1 = require("../../../lib/is");
const dateTimeHelper_1 = require("../../../lib/dateTimeHelper");
const common_1 = require("../../../lib/columnHelper/utils/common");
const parseDefault = (value) => {
    var _a;
    try {
        if (typeof value === 'object') {
            return JSON.stringify(value);
        }
        else {
            return (_a = value === null || value === void 0 ? void 0 : value.toString()) !== null && _a !== void 0 ? _a : null;
        }
    }
    catch (_b) {
        return null;
    }
};
exports.parseDefault = parseDefault;
const parseIntValue = (value, col) => {
    if ((0, is_1.ncIsNaN)(value)) {
        return null;
    }
    value = parseInt(value.toString(), 10);
    const columnMeta = (0, helperFunctions_1.parseProp)(col === null || col === void 0 ? void 0 : col.meta);
    if (columnMeta.isLocaleString) {
        return Number(value).toLocaleString();
    }
    return Number(value);
};
exports.parseIntValue = parseIntValue;
const parseDecimalValue = (value, col) => {
    var _a, _b, _c, _d;
    if ((0, is_1.ncIsNaN)(value)) {
        return null;
    }
    const columnMeta = (0, helperFunctions_1.parseProp)(col.meta);
    if (columnMeta.isLocaleString) {
        return Number((0, helperFunctions_1.roundUpToPrecision)(Number(value), (_a = columnMeta.precision) !== null && _a !== void 0 ? _a : 1)).toLocaleString(undefined, {
            minimumFractionDigits: (_b = columnMeta.precision) !== null && _b !== void 0 ? _b : 1,
            maximumFractionDigits: (_c = columnMeta.precision) !== null && _c !== void 0 ? _c : 1,
        });
    }
    return (0, helperFunctions_1.roundUpToPrecision)(Number(value), (_d = columnMeta.precision) !== null && _d !== void 0 ? _d : 1);
};
exports.parseDecimalValue = parseDecimalValue;
const parsePercentValue = (value) => {
    if ((0, is_1.ncIsNaN)(value)) {
        return null;
    }
    return `${Number(value)}%`;
};
exports.parsePercentValue = parsePercentValue;
const parseDurationValue = (value, col) => {
    var _a;
    const durationType = ((_a = (0, helperFunctions_1.parseProp)(col.meta)) === null || _a === void 0 ? void 0 : _a.duration) || 0;
    return (0, durationUtils_1.convertMS2Duration)(value, durationType);
};
exports.parseDurationValue = parseDurationValue;
const parseCheckboxValue = (value) => {
    if ((0, is_1.ncIsBoolean)(value))
        return value;
    if ((0, is_1.ncIsString)(value)) {
        const strval = value.trim().toLowerCase();
        const parsedValue = common_1.checkboxTypeMap[strval];
        if (!(0, is_1.ncIsNull)(parsedValue) && !(0, is_1.ncIsUndefined)(parsedValue)) {
            return parsedValue;
        }
    }
    if ((0, is_1.ncIsNumber)(value)) {
        if (value === 1)
            return true;
        if (value === 0)
            return false;
    }
    return null;
};
exports.parseCheckboxValue = parseCheckboxValue;
const parseJsonValue = (value) => {
    try {
        return (0, is_1.ncIsString)(value)
            ? JSON.stringify(JSON.parse(value)) // Ensure it's a valid JSON string
            : JSON.stringify(value); // Convert object/array to JSON
    }
    catch (_a) {
        return null;
    }
};
exports.parseJsonValue = parseJsonValue;
const parseCurrencyValue = (value, col) => {
    var _a, _b, _c;
    if ((0, is_1.ncIsNaN)(value)) {
        return null;
    }
    const columnMeta = (0, helperFunctions_1.parseProp)(col.meta);
    try {
        // Round the value to the specified precision
        const roundedValue = (0, helperFunctions_1.roundUpToPrecision)(Number(value), (_a = columnMeta.precision) !== null && _a !== void 0 ? _a : 2);
        return new Intl.NumberFormat(columnMeta.currency_locale || 'en-US', {
            style: 'currency',
            currency: columnMeta.currency_code || 'USD',
            minimumFractionDigits: (_b = columnMeta.precision) !== null && _b !== void 0 ? _b : 2,
            maximumFractionDigits: (_c = columnMeta.precision) !== null && _c !== void 0 ? _c : 2,
        }).format(+roundedValue);
    }
    catch (_d) {
        return value;
    }
};
exports.parseCurrencyValue = parseCurrencyValue;
const parseTimeValue = (value, params) => {
    var _a, _b;
    value = value === null || value === void 0 ? void 0 : value.toString().trim();
    if (!value)
        return null;
    // remove `"`
    // e.g. "2023-05-12T08:03:53.000Z" -> 2023-05-12T08:03:53.000Z
    value = value.replace(/["']/g, '');
    const isMySQL = (_a = params.isMysql) === null || _a === void 0 ? void 0 : _a.call(params, params.col.source_id);
    const isPostgres = (_b = params.isPg) === null || _b === void 0 ? void 0 : _b.call(params, params.col.source_id);
    let d = (0, dayjs_1.default)(value);
    if (!d.isValid()) {
        // insert a datetime value, copy the value without refreshing
        // e.g. value = 2023-05-12T03:49:25.000Z
        // feed custom parse format
        d = (0, dayjs_1.default)(value, isMySQL ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD HH:mm:ssZ');
    }
    if (!d.isValid()) {
        // MySQL and Postgres store time in HH:mm:ss format so we need to feed custom parse format
        d = isMySQL || isPostgres ? (0, dayjs_1.default)(value, 'HH:mm:ss') : (0, dayjs_1.default)(value);
    }
    if (!d.isValid()) {
        d = (0, dayjs_1.default)(`1999-01-01 ${value}`);
    }
    if (!d.isValid()) {
        // return empty string for invalid time
        return null;
    }
    return d.format((0, dateTimeHelper_1.constructTimeFormat)(params.col));
};
exports.parseTimeValue = parseTimeValue;
const parseYearValue = (value) => {
    value = value === null || value === void 0 ? void 0 : value.toString().trim();
    if (!value || !(0, dayjs_1.default)(value).isValid()) {
        return null;
    }
    value = (0, dayjs_1.default)(value, 'YYYY').format('YYYY');
    return value ? +value : value;
};
exports.parseYearValue = parseYearValue;
const parseUserValue = (value, withDisplayName = false) => {
    let data = value;
    try {
        if (typeof value === 'string') {
            data = JSON.parse(value);
        }
    }
    catch (_a) { }
    return ((0, is_1.ncIsArray)(data) ? data : (0, is_1.ncIsObject)(data) ? [data] : [])
        .map((user) => withDisplayName && user.display_name
        ? `${user.display_name}<${user.email}>`
        : `${user.email}`)
        .join(', ');
};
exports.parseUserValue = parseUserValue;
const parseLinksValue = (value, params) => {
    var _a, _b, _c;
    const { col, t } = params;
    const columnMeta = (0, helperFunctions_1.parseProp)(col.meta);
    const parsedValue = +value || 0;
    if (!parsedValue) {
        return `0 ${columnMeta.plural || ((_a = t === null || t === void 0 ? void 0 : t('general.links')) !== null && _a !== void 0 ? _a : 'Links')}`;
    }
    else if (parsedValue === 1) {
        return `1 ${columnMeta.singular || ((_b = t === null || t === void 0 ? void 0 : t('general.link')) !== null && _b !== void 0 ? _b : 'Link')}`;
    }
    else {
        return `${parsedValue} ${columnMeta.plural || ((_c = t('general.links')) !== null && _c !== void 0 ? _c : 'Links')}`;
    }
};
exports.parseLinksValue = parseLinksValue;
//# sourceMappingURL=data:application/json;base64,