"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateHelper = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const dateTimeHelper_1 = require("../../../lib/dateTimeHelper");
const __1 = require("..");
const column_interface_1 = __importDefault(require("../column.interface"));
const error_1 = require("../../../lib/error");
const helperFunctions_1 = require("../../../lib/helperFunctions");
const is_1 = require("../../../lib/is");
const fill_handler_1 = require("../utils/fill-handler");
class DateHelper extends column_interface_1.default {
    constructor() {
        super(...arguments);
        this.columnDefaultMeta = {
            date_format: dateTimeHelper_1.dateFormats[0],
        };
    }
    serializeValue(value, params) {
        if (params.serializeSearchQuery)
            return null;
        value = (0, __1.serializeDateOrDateTimeValue)(value, params.col);
        if (value === null) {
            if (params.isMultipleCellPaste) {
                return null;
            }
            else {
                throw new error_1.SilentTypeConversionError();
            }
        }
        return value;
    }
    parseValue(value, params) {
        return (0, __1.parseDateValue)(value, params.col, params.isSystemCol);
    }
    parsePlainCellValue(value, params) {
        var _a;
        return (_a = (0, __1.parseDateValue)(value, params.col, params.isSystemCol)) !== null && _a !== void 0 ? _a : '';
    }
    populateFillHandle(params) {
        var _a;
        const { column, highlightedData, numberOfRows } = params;
        if (highlightedData.length < 2) {
            return (0, fill_handler_1.populateFillHandleStrictCopy)(params);
        }
        // data is in form like 'YYYY-MM-DD' depends on meta dateformat
        const meta = (0, helperFunctions_1.parseProp)(column.meta);
        const metaDateFormat = (_a = meta.date_format) !== null && _a !== void 0 ? _a : 'YYYY-MM-DD';
        const dateFormat = metaDateFormat + ' HH:mm:ss';
        let lastData;
        let modifier = undefined;
        let scale = 'D';
        const setModifierForScaleIfRound = (currentData, lastData, diffScale) => {
            const currentModifier = currentData.diff(lastData, diffScale, true);
            if ((0, __1.isNumberRound)(currentModifier)) {
                scale = __1.DATE_DIFF_TO_SCALE_LABEL_MAP[diffScale];
                modifier = currentModifier;
            }
        };
        // map to dayjs
        const dayJsHighlightedData = [];
        for (const date of highlightedData) {
            if ((0, is_1.ncIsNullOrUndefined)(date) ||
                date === '' ||
                typeof date !== 'string') {
                return (0, fill_handler_1.populateFillHandleStrictCopy)(params);
            }
            const currentData = (0, dayjs_1.default)(date + ' 00:00:00', dateFormat);
            // unlikely on normal case
            if (!currentData.isValid()) {
                return (0, fill_handler_1.populateFillHandleStrictCopy)(params);
            }
            if (!lastData) {
                lastData = currentData;
            }
            else {
                if ((0, is_1.ncIsUndefined)(modifier)) {
                    const modifierInDays = currentData.diff(lastData, 'day');
                    if (modifierInDays > 354) {
                        setModifierForScaleIfRound(currentData, lastData, 'year');
                    }
                    else if (modifierInDays > 28) {
                        setModifierForScaleIfRound(currentData, lastData, 'month');
                    }
                    else {
                        modifier = modifierInDays;
                        scale = 'D';
                    }
                }
                else {
                    const currentModifier = currentData.diff(lastData, __1.DATE_SCALE_LABEL_TO_DIFF_MAP[scale]);
                    if (currentModifier !== modifier) {
                        return (0, fill_handler_1.populateFillHandleStrictCopy)(params);
                    }
                }
                lastData = currentData;
            }
            dayJsHighlightedData.push(lastData);
        }
        if (modifier === 0) {
            return (0, fill_handler_1.populateFillHandleStrictCopy)(params);
        }
        const numberToGenerate = numberOfRows - highlightedData.length;
        return Array.from({ length: numberToGenerate }).map(() => {
            const currentData = lastData.add(modifier, __1.DATE_SCALE_LABEL_TO_DIFF_MAP[scale]);
            lastData = currentData;
            return currentData.format(metaDateFormat);
        });
    }
}
exports.DateHelper = DateHelper;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvY29sdW1uSGVscGVyL2NvbHVtbnMvRGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrREFBMEI7QUFDMUIseURBQW1EO0FBQ25ELDBCQU1ZO0FBQ1osMkVBRTZCO0FBQzdCLHVDQUF3RDtBQUV4RCwyREFBa0Q7QUFDbEQsaUNBQThEO0FBQzlELHdEQUFxRTtBQUVyRSxNQUFhLFVBQVcsU0FBUSwwQkFBb0I7SUFBcEQ7O1FBQ0Usc0JBQWlCLEdBQUc7WUFDbEIsV0FBVyxFQUFFLDRCQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzVCLENBQUM7SUE4SEosQ0FBQztJQTVIQyxjQUFjLENBQ1osS0FBVSxFQUNWLE1BQTJDO1FBRTNDLElBQUksTUFBTSxDQUFDLG9CQUFvQjtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBQzdDLEtBQUssR0FBRyxJQUFBLGdDQUE0QixFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFeEQsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDbkIsSUFBSSxNQUFNLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztnQkFDL0IsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sTUFBTSxJQUFJLGlDQUF5QixFQUFFLENBQUM7WUFDeEMsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRCxVQUFVLENBQ1IsS0FBVSxFQUNWLE1BQXVFO1FBRXZFLE9BQU8sSUFBQSxrQkFBYyxFQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsbUJBQW1CLENBQ2pCLEtBQVUsRUFDVixNQUF1RTs7UUFFdkUsT0FBTyxNQUFBLElBQUEsa0JBQWMsRUFBQyxLQUFLLEVB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