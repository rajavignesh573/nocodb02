"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateFormulaAndExtractTreeWithType = validateFormulaAndExtractTreeWithType;
const jsep_1 = __importDefault(require("jsep"));
const UITypes_1 = __importDefault(require("../UITypes"));
const enums_1 = require("./enums");
const error_1 = require("./error");
const sqlUi_1 = require("../sqlUi");
const handle_formula_error_1 = require("./handle-formula-error");
const formulas_1 = require("./formulas");
const hooks_1 = require("./hooks");
async function extractColumnIdentifierType({ col, columns, getMeta, clientOrSqlUi, }) {
    const res = {};
    const sqlUI = typeof clientOrSqlUi === 'string'
        ? sqlUi_1.SqlUiFactory.create({ client: clientOrSqlUi })
        : clientOrSqlUi;
    switch (col === null || col === void 0 ? void 0 : col.uidt) {
        // string
        case UITypes_1.default.SingleLineText:
        case UITypes_1.default.LongText:
        case UITypes_1.default.MultiSelect:
        case UITypes_1.default.SingleSelect:
        case UITypes_1.default.PhoneNumber:
        case UITypes_1.default.Email:
        case UITypes_1.default.URL:
        case UITypes_1.default.User:
        case UITypes_1.default.CreatedBy:
        case UITypes_1.default.LastModifiedBy:
            res.dataType = enums_1.FormulaDataTypes.STRING;
            break;
        // numeric
        case UITypes_1.default.Year:
        case UITypes_1.default.Number:
        case UITypes_1.default.Decimal:
        case UITypes_1.default.Rating:
        case UITypes_1.default.Count:
        case UITypes_1.default.AutoNumber:
            res.dataType = enums_1.FormulaDataTypes.NUMERIC;
            break;
        // date
        case UITypes_1.default.Date:
        case UITypes_1.default.DateTime:
        case UITypes_1.default.CreatedTime:
        case UITypes_1.default.LastModifiedTime:
            res.dataType = enums_1.FormulaDataTypes.DATE;
            break;
        case UITypes_1.default.Currency:
        case UITypes_1.default.Percent:
        case UITypes_1.default.Duration:
        case UITypes_1.default.Links:
            res.dataType = enums_1.FormulaDataTypes.NUMERIC;
            break;
        case UITypes_1.default.Rollup:
            {
                const rollupFunction = col.colOptions.rollup_function;
                if ([
                    'count',
                    'avg',
                    'sum',
                    'countDistinct',
                    'sumDistinct',
                    'avgDistinct',
                ].includes(rollupFunction)) {
                    // these functions produce a numeric value, which can be used in numeric functions
                    res.dataType = enums_1.FormulaDataTypes.NUMERIC;
                }
                else {
                    const relationColumnOpt = columns.find((column) => column.id === col.colOptions.fk_relation_column_id);
                    // the value is based on the foreign rollup column type
                    const refTableMeta = await getMeta(relationColumnOpt.colOptions
                        .fk_related_model_id);
                    const refTableColumns = refTableMeta.columns;
                    const childFieldColumn = refTableColumns.find((column) => column.id === col.colOptions.fk_rollup_column_id);
                    // extract type and add to res
                    Object.assign(res, await extractColumnIdentifierType({
                        col: childFieldColumn,
                        columns: refTableColumns,
                        getMeta,
                        clientOrSqlUi,
                    }));
                }
            }
            break;
        case UITypes_1.default.Attachment:
            res.dataType = enums_1.FormulaDataTypes.STRING;
            break;
        case UITypes_1.default.Checkbox:
            if (col.dt === 'boolean' || col.dt === 'bool') {
                res.dataType = enums_1.FormulaDataTypes.BOOLEAN;
            }
            else {
                res.dataType = enums_1.FormulaDataTypes.NUMERIC;
            }
            break;
        case UITypes_1.default.Time:
            res.dataType = enums_1.FormulaDataTypes.INTERVAL;
            break;
        case UITypes_1.default.ID:
        case UITypes_1.default.ForeignKey:
        case UITypes_1.default.SpecificDBType:
            {
                if (sqlUI) {
                    const abstractType = sqlUI.getAbstractType(col);
                    if (['integer', 'float', 'decimal'].includes(abstractType)) {
                        res.dataType = enums_1.FormulaDataTypes.NUMERIC;
                    }
                    else if (['boolean'].includes(abstractType)) {
                        res.dataType = enums_1.FormulaDataTypes.BOOLEAN;
                    }
                    else if (['date', 'datetime', 'time', 'year'].includes(abstractType)) {
                        res.dataType = enums_1.FormulaDataTypes.DATE;
                    }
                    else {
                        res.dataType = enums_1.FormulaDataTypes.STRING;
                    }
                }
                else {
                    res.dataType = enums_1.FormulaDataTypes.UNKNOWN;
                }
            }
            break;
        // not supported
        case UITypes_1.default.Lookup:
        case UITypes_1.default.LinkToAnotherRecord:
            res.dataType = enums_1.FormulaDataTypes.ARRAY;
            break;
        case UITypes_1.default.Barcode:
        case UITypes_1.default.Button:
        case UITypes_1.default.Collaborator:
        case UITypes_1.default.QrCode:
        default:
            res.dataType = enums_1.FormulaDataTypes.UNKNOWN;
            break;
    }
    return res;
}
function handleBinaryExpressionForDateAndTime(params) {
    const { sourceBinaryNode } = params;
    let res;
    if ([enums_1.FormulaDataTypes.DATE, enums_1.FormulaDataTypes.INTERVAL].includes(sourceBinaryNode.left.dataType) &&
        [enums_1.FormulaDataTypes.DATE, enums_1.FormulaDataTypes.INTERVAL].includes(sourceBinaryNode.right.dataType) &&
        sourceBinaryNode.operator === '-') {
        // when it's interval and interval, we return diff in minute (numeric)
        if ([enums_1.FormulaDataTypes.INTERVAL].includes(sourceBinaryNode.left.dataType) &&
            [enums_1.FormulaDataTypes.INTERVAL].includes(sourceBinaryNode.right.dataType)) {
            res = {
                type: enums_1.JSEPNode.CALL_EXP,
                arguments: [
                    sourceBinaryNode.left,
                    sourceBinaryNode.right,
                    {
                        type: 'Literal',
                        value: 'minutes',
                        raw: '"minutes"',
                        dataType: 'string',
                    },
                ],
                callee: {
                    type: 'Identifier',
                    name: 'DATETIME_DIFF',
                },
                dataType: enums_1.FormulaDataTypes.NUMERIC,
            };
        }
        // when it's date - date, show the difference in minute
        else if ([enums_1.FormulaDataTypes.DATE].includes(sourceBinaryNode.left.dataType) &&
            [enums_1.FormulaDataTypes.DATE].includes(sourceBinaryNode.right.dataType)) {
            res = {
                type: enums_1.JSEPNode.CALL_EXP,
                arguments: [
                    sourceBinaryNode.left,
                    sourceBinaryNode.right,
                    {
                        type: 'Literal',
                        value: 'minutes',
                        raw: '"minutes"',
                        dataType: 'string',
                    },
                ],
                callee: {
                    type: 'Identifier',
                    name: 'DATETIME_DIFF',
                },
                dataType: enums_1.FormulaDataTypes.NUMERIC,
            };
        }
        // else interval and date can be addedd seamlessly A - B
        // with result as DATE
        // may be changed if we find other db use case
        else if ([enums_1.FormulaDataTypes.INTERVAL, enums_1.FormulaDataTypes.DATE].includes(sourceBinaryNode.left.dataType) &&
            [enums_1.FormulaDataTypes.INTERVAL, enums_1.FormulaDataTypes.DATE].includes(sourceBinaryNode.right.dataType) &&
            sourceBinaryNode.left.dataType != sourceBinaryNode.right.dataType) {
            res = {
                type: enums_1.JSEPNode.BINARY_EXP,
                left: sourceBinaryNode.left,
                right: sourceBinaryNode.right,
                operator: '-',
                dataType: enums_1.FormulaDataTypes.DATE,
            };
        }
    }
    else if ([enums_1.FormulaDataTypes.DATE, enums_1.FormulaDataTypes.INTERVAL].includes(sourceBinaryNode.left.dataType) &&
        [enums_1.FormulaDataTypes.DATE, enums_1.FormulaDataTypes.INTERVAL].includes(sourceBinaryNode.right.dataType) &&
        sourceBinaryNode.operator === '+') {
        // when it's interval and interval, we return addition in minute (numeric)
        if ([enums_1.FormulaDataTypes.INTERVAL].includes(sourceBinaryNode.left.dataType) &&
            [enums_1.FormulaDataTypes.INTERVAL].includes(sourceBinaryNode.right.dataType)) {
            const left = {
                type: enums_1.JSEPNode.CALL_EXP,
                arguments: [
                    sourceBinaryNode.left,
                    {
                        type: 'Literal',
                        value: '00:00:00',
                        raw: '"00:00:00"',
                        dataType: enums_1.FormulaDataTypes.INTERVAL,
                    },
                    {
                        type: 'Literal',
                        value: 'minutes',
                        raw: '"minutes"',
                        dataType: 'string',
                    },
                ],
                callee: {
                    type: 'Identifier',
                    name: 'DATETIME_DIFF',
                },
                dataType: enums_1.FormulaDataTypes.NUMERIC,
            };
            const right = {
                type: enums_1.JSEPNode.CALL_EXP,
                arguments: [
                    sourceBinaryNode.right,
                    {
                        type: 'Literal',
                        value: '00:00:00',
                        raw: '"00:00:00"',
                        dataType: enums_1.FormulaDataTypes.INTERVAL,
                    },
                    {
                        type: 'Literal',
                        value: 'minutes',
                        raw: '"minutes"',
                        dataType: 'string',
                    },
                ],
                callee: {
                    type: 'Identifier',
                    name: 'DATETIME_DIFF',
                },
                dataType: enums_1.FormulaDataTypes.NUMERIC,
            };
            return {
                type: enums_1.JSEPNode.BINARY_EXP,
                left,
                right,
                operator: '+',
                dataType: enums_1.FormulaDataTypes.NUMERIC,
            };
        }
        // else interval and date can be addedd seamlessly A + B
        // with result as DATE
        // may be changed if we find other db use case
        else if ([enums_1.FormulaDataTypes.INTERVAL, enums_1.FormulaDataTypes.DATE].includes(sourceBinaryNode.left.dataType) &&
            [enums_1.FormulaDataTypes.INTERVAL, enums_1.FormulaDataTypes.DATE].includes(sourceBinaryNode.right.dataType) &&
            sourceBinaryNode.left.dataType != sourceBinaryNode.right.dataType) {
            res = {
                type: enums_1.JSEPNode.BINARY_EXP,
                left: sourceBinaryNode.left,
                right: sourceBinaryNode.right,
                operator: '+',
                dataType: enums_1.FormulaDataTypes.DATE,
            };
        }
    }
    return res;
}
async function checkForCircularFormulaRef(formulaCol, parsedTree, columns, getMeta) {
    // Extract formula references
    const formulaPaths = await columns.reduce(async (promiseRes, c) => {
        const res = await promiseRes;
        if (c.id !== formulaCol.id && c.uidt === UITypes_1.default.Formula) {
            const neighbours = [
                ...new Set((c.colOptions.formula.match(/cl?_?\w{14,15}/g) || []).filter((colId) => columns.some((col) => col.id === colId && col.uidt === UITypes_1.default.Formula))),
            ];
            if (neighbours.length)
                res.push({ [c.id]: neighbours });
        }
        else if (c.uidt === UITypes_1.default.Lookup ||
            c.uidt === UITypes_1.default.LinkToAnotherRecord) {
            const neighbours = await processLookupOrLTARColumn(c);
            if (neighbours === null || neighbours === void 0 ? void 0 : neighbours.length)
                res.push({ [c.id]: neighbours });
        }
        return res;
    }, Promise.resolve([]));
    async function processLookupFormula(col, columns) {
        const neighbours = [];
        if (formulaCol.fk_model_id === col.fk_model_id) {
            return [col.id];
        }
        // Extract columns used in the formula and check for cycles
        const referencedColumns = col.colOptions.formula.match(/cl?_?\w{14,15}/g) || [];
        for (const refColId of referencedColumns) {
            const refCol = columns.find((c) => c.id === refColId);
            if (refCol.uidt === UITypes_1.default.Formula) {
                neighbours.push(...(await processLookupFormula(refCol, columns)));
            }
            else if (refCol.uidt === UITypes_1.default.Lookup ||
                refCol.uidt === UITypes_1.default.LinkToAnotherRecord) {
                neighbours.push(...(await processLookupOrLTARColumn(refCol)));
            }
        }
        return neighbours;
    }
    // Function to process lookup columns recursively
    async function processLookupOrLTARColumn(lookupOrLTARCol) {
        const neighbours = [];
        let ltarColumn;
        let lookupFilterFn;
        if (lookupOrLTARCol.uidt === UITypes_1.default.Lookup) {
            const relationColId = lookupOrLTARCol.colOptions
                .fk_relation_column_id;
            const lookupColId = lookupOrLTARCol.colOptions
                .fk_lookup_column_id;
            ltarColumn = columns.find((c) => c.id === relationColId);
            lookupFilterFn = (column) => column.id === lookupColId;
        }
        else if (lookupOrLTARCol.uidt === UITypes_1.default.LinkToAnotherRecord) {
            ltarColumn = lookupOrLTARCol;
            lookupFilterFn = (column) => !!column.pv;
        }
        if (ltarColumn) {
            const relatedTableMeta = await getMeta(ltarColumn.colOptions.fk_related_model_id);
            const lookupTarget = relatedTableMeta.columns.find(lookupFilterFn);
            if (lookupTarget) {
                if (lookupTarget.uidt === UITypes_1.default.Formula) {
                    neighbours.push(...(await processLookupFormula(lookupTarget, relatedTableMeta.columns)));
                }
                else if (lookupTarget.uidt === UITypes_1.default.Lookup ||
                    lookupTarget.uidt === UITypes_1.default.LinkToAnotherRecord) {
                    neighbours.push(...(await processLookupOrLTARColumn(lookupTarget)));
                }
            }
        }
        return [...new Set(neighbours)];
    }
    // include target formula column (i.e. the one to be saved if applicable)
    const targetFormulaCol = columns.find((c) => c.title === parsedTree.name &&
        [UITypes_1.default.Formula, UITypes_1.default.LinkToAnotherRecord, UITypes_1.default.Lookup].includes(c.uidt));
    if (targetFormulaCol && (formulaCol === null || formulaCol === void 0 ? void 0 : formulaCol.id)) {
        formulaPaths.push({
            [formulaCol === null || formulaCol === void 0 ? void 0 : formulaCol.id]: [targetFormulaCol.id],
        });
    }
    const vertices = formulaPaths.length;
    if (vertices > 0) {
        // perform kahn's algo for cycle detection
        const adj = new Map();
        const inDegrees = new Map();
        // init adjacency list & indegree
        for (const [_, v] of Object.entries(formulaPaths)) {
            const src = Object.keys(v)[0];
            const neighbours = v[src];
            inDegrees.set(src, inDegrees.get(src) || 0);
            for (const neighbour of neighbours) {
                adj.set(src, (adj.get(src) || new Set()).add(neighbour));
                inDegrees.set(neighbour, (inDegrees.get(neighbour) || 0) + 1);
            }
        }
        const queue = [];
        // put all vertices with in-degree = 0 (i.e. no incoming edges) to queue
        inDegrees.forEach((inDegree, col) => {
            if (inDegree === 0) {
                // in-degree = 0 means we start traversing from this node
                queue.push(col);
            }
        });
        // init count of visited vertices
        let visited = 0;
        // BFS
        while (queue.length !== 0) {
            // remove a vertex from the queue
            const src = queue.shift();
            // if this node has neighbours, increase visited by 1
            const neighbours = adj.get(src) || new Set();
            if (neighbours.size > 0) {
                visited += 1;
            }
            // iterate each neighbouring nodes
            neighbours.forEach((neighbour) => {
                // decrease in-degree of its neighbours by 1
                inDegrees.set(neighbour, inDegrees.get(neighbour) - 1);
                // if in-degree becomes 0
                if (inDegrees.get(neighbour) === 0) {
                    // then put the neighboring node to the queue
                    queue.push(neighbour);
                }
            });
        }
        // vertices not same as visited = cycle found
        if (vertices !== visited) {
            throw new error_1.FormulaError(enums_1.FormulaErrorType.CIRCULAR_REFERENCE, {
                key: 'msg.formula.cantSaveCircularReference',
            }, 'Circular reference detected');
        }
    }
}
async function validateFormulaAndExtractTreeWithType({ formula, column, columns, clientOrSqlUi, getMeta, trackPosition, }) {
    const sqlUI = typeof clientOrSqlUi === 'string'
        ? sqlUi_1.SqlUiFactory.create({ client: clientOrSqlUi })
        : clientOrSqlUi;
    const colAliasToColMap = {};
    const colIdToColMap = {};
    for (const col of columns) {
        colAliasToColMap[col.title] = col;
        colIdToColMap[col.id] = col;
    }
    const validateAndExtract = async (parsedTree) => {
        var _a, _b, _c, _d, _e, _f, _g;
        const res = Object.assign({}, parsedTree);
        if (parsedTree.type === enums_1.JSEPNode.CALL_EXP) {
            const calleeName = parsedTree.callee.name.toUpperCase();
            // validate function name
            if (!formulas_1.formulas[calleeName]) {
                throw new error_1.FormulaError(enums_1.FormulaErrorType.INVALID_FUNCTION_NAME, {
                    calleeName,
                    position: parsedTree.indexStart >= 0
                        ? {
                            index: parsedTree.indexStart,
                            length: parsedTree.nodeLength,
                        }
                        : undefined,
                }, `Function ${calleeName} is not available`);
            }
            else if (sqlUI === null || sqlUI === void 0 ? void 0 : sqlUI.getUnsupportedFnList().includes(calleeName)) {
                throw new error_1.FormulaError(enums_1.FormulaErrorType.INVALID_FUNCTION_NAME, {
                    calleeName,
                    position: parsedTree.indexStart >= 0
                        ? {
                            index: parsedTree.indexStart,
                            length: parsedTree.nodeLength,
                        }
                        : undefined,
                }, `Function ${calleeName} is unavailable for your database`);
            }
            // validate arguments
            const validation = formulas_1.formulas[calleeName] && formulas_1.formulas[calleeName].validation;
            if (validation && validation.args) {
                if (validation.args.rqd !== undefined &&
                    validation.args.rqd !== parsedTree.arguments.length) {
                    throw new error_1.FormulaError(enums_1.FormulaErrorType.INVALID_ARG, {
                        key: 'msg.formula.requiredArgumentsFormula',
                        requiredArguments: validation.args.rqd,
                        calleeName,
                        position: parsedTree.indexStart >= 0
                            ? {
                                index: parsedTree.indexStart,
                                length: parsedTree.nodeLength,
                            }
                            : undefined,
                    }, 'Required arguments missing');
                }
                else if (validation.args.min !== undefined &&
                    validation.args.min > parsedTree.arguments.length) {
                    throw new error_1.FormulaError(enums_1.FormulaErrorType.MIN_ARG, {
                        key: 'msg.formula.minRequiredArgumentsFormula',
                        minRequiredArguments: validation.args.min,
                        calleeName,
                        position: parsedTree.indexStart >= 0
                            ? {
                                index: parsedTree.indexStart,
                                length: parsedTree.nodeLength,
                            }
                            : undefined,
                    }, 'Minimum arguments required');
                }
                else if (validation.args.max !== undefined &&
                    validation.args.max < parsedTree.arguments.length) {
                    throw new error_1.FormulaError(enums_1.FormulaErrorType.INVALID_ARG, {
                        key: 'msg.formula.maxRequiredArgumentsFormula',
                        maxRequiredArguments: validation.args.max,
                        calleeName,
                        position: parsedTree.indexStart >= 0
                            ? {
                                index: parsedTree.indexStart,
                                length: parsedTree.nodeLength,
                            }
                            : undefined,
                    }, 'Maximum arguments missing');
                }
            }
            // get args type and validate
            const validateResult = (res.arguments =
                await Promise.all(parsedTree.arguments.map((arg) => {
                    return validateAndExtract(arg);
                })));
            const argTypes = validateResult.map((v) => v.dataType);
            // if validation function is present, call it
            if ((_a = formulas_1.formulas[calleeName].validation) === null || _a === void 0 ? void 0 : _a.custom) {
                (_b = formulas_1.formulas[calleeName].validation) === null || _b === void 0 ? void 0 : _b.custom(argTypes, parsedTree);
            }
            // validate against expected arg types if present
            else if ((_d = (_c = formulas_1.formulas[calleeName].validation) === null || _c === void 0 ? void 0 : _c.args) === null || _d === void 0 ? void 0 : _d.type) {
                for (let i = 0; i < validateResult.length; i++) {
                    const argPt = validateResult[i];
                    // if type
                    const expectedArgType = Array.isArray(formulas_1.formulas[calleeName].validation.args.type)
                        ? formulas_1.formulas[calleeName].validation.args.type[i]
                        : formulas_1.formulas[calleeName].validation.args.type;
                    if (argPt.dataType !== expectedArgType &&
                        argPt.dataType !== enums_1.FormulaDataTypes.NULL &&
                        argPt.dataType !== enums_1.FormulaDataTypes.UNKNOWN &&
                        expectedArgType !== enums_1.FormulaDataTypes.STRING) {
                        if (argPt.type === enums_1.JSEPNode.IDENTIFIER) {
                            const name = ((_e = columns === null || columns === void 0 ? void 0 : columns.find((c) => c.id === argPt.name || c.title === argPt.name)) === null || _e === void 0 ? void 0 : _e.title) || argPt.name;
                            throw new error_1.FormulaError(enums_1.FormulaErrorType.INVALID_ARG, {
                                key: 'msg.formula.columnWithTypeFoundButExpected',
                                columnName: name,
                                columnType: argPt.dataType,
                                expectedType: expectedArgType,
                            }, `Field ${name} with ${argPt.dataType} type is found but ${expectedArgType} type is expected`);
                        }
                        else {
                            let key = '';
                            const position = i + 1;
                            let type = '';
                            if (expectedArgType === enums_1.FormulaDataTypes.NUMERIC) {
                                key = 'msg.formula.typeIsExpected';
                                type = 'numeric';
                            }
                            else if (expectedArgType === enums_1.FormulaDataTypes.BOOLEAN) {
                                key = 'msg.formula.typeIsExpected';
                                type = 'boolean';
                            }
                            else if (expectedArgType === enums_1.FormulaDataTypes.DATE) {
                                key = 'msg.formula.typeIsExpected';
                                type = 'date';
                            }
                            throw new error_1.FormulaError(enums_1.FormulaErrorType.INVALID_ARG, {
                                type,
                                key,
                                position,
                                calleeName,
                            }, `${calleeName === null || calleeName === void 0 ? void 0 : calleeName.toUpperCase()} requires a ${type || expectedArgType} at position ${position}`);
                        }
                    }
                    // if expected type is string and arg type is not string, then cast it to string
                    if (expectedArgType === enums_1.FormulaDataTypes.STRING &&
                        expectedArgType !== argPt.dataType) {
                        argPt.cast = enums_1.FormulaDataTypes.STRING;
                    }
                }
            }
            if (typeof formulas_1.formulas[calleeName].returnType === 'function') {
                res.dataType = (_g = (_f = formulas_1.formulas[calleeName]).returnType) === null || _g === void 0 ? void 0 : _g.call(_f, argTypes);
            }
            else if (formulas_1.formulas[calleeName].returnType) {
                res.dataType = formulas_1.formulas[calleeName].returnType;
            }
        }
        else if (parsedTree.type === enums_1.JSEPNode.IDENTIFIER) {
            const identifierName = parsedTree.name;
            const col = (colIdToColMap[identifierName] ||
                colAliasToColMap[identifierName]);
            if (!col) {
                if (formulas_1.formulas[identifierName]) {
                    throw new error_1.FormulaError(enums_1.FormulaErrorType.INVALID_SYNTAX, {
                        key: 'msg.formula.formulaMissingParentheses',
                        calleeName: identifierName,
                        position: parsedTree.indexStart >= 0
                            ? {
                                index: parsedTree.indexEnd,
                                length: 1,
                            }
                            : undefined,
                    }, `Missing parentheses after function name "${JSON.stringify(identifierName)}"`);
                }
                throw new error_1.FormulaError(enums_1.FormulaErrorType.INVALID_COLUMN, {
                    key: 'msg.formula.columnNotAvailable',
                    columnName: identifierName,
                    position: parsedTree.indexStart >= 0
                        ? {
                            index: parsedTree.indexStart,
                            length: parsedTree.nodeLength,
                        }
                        : undefined,
                }, `Invalid column name/id ${JSON.stringify(identifierName)} in formula`);
            }
            res.name = col.id;
            if ((col === null || col === void 0 ? void 0 : col.uidt) === UITypes_1.default.Formula) {
                if (column) {
                    // check for circular reference when column is present(only available when calling root formula)
                    await checkForCircularFormulaRef(column, parsedTree, columns, getMeta);
                }
                const formulaRes = col.colOptions.parsed_tree ||
                    (await validateFormulaAndExtractTreeWithType(
                    // formula may include double curly brackets in previous version
                    // convert to single curly bracket here for compatibility
                    {
                        formula: col.colOptions.formula
                            .replaceAll('{{', '{')
                            .replaceAll('}}', '}'),
                        columns,
                        clientOrSqlUi,
                        getMeta,
                    }));
                res.dataType = formulaRes === null || formulaRes === void 0 ? void 0 : formulaRes.dataType;
            }
            else {
                if ((col === null || col === void 0 ? void 0 : col.uidt) === UITypes_1.default.Lookup ||
                    (col === null || col === void 0 ? void 0 : col.uidt) === UITypes_1.default.LinkToAnotherRecord) {
                    // check for circular reference when column is present(only available when calling root formula)
                    if (column) {
                        await checkForCircularFormulaRef(column, parsedTree, columns, getMeta);
                    }
                }
                // extract type and add to res
                Object.assign(res, await extractColumnIdentifierType({
                    col,
                    columns,
                    getMeta,
                    clientOrSqlUi,
                }));
            }
        }
        else if (parsedTree.type === enums_1.JSEPNode.LITERAL) {
            if (typeof parsedTree.value === 'number') {
                res.dataType = enums_1.FormulaDataTypes.NUMERIC;
            }
            else if (typeof parsedTree.value === 'string') {
                res.dataType = enums_1.FormulaDataTypes.STRING;
            }
            else if (typeof parsedTree.value === 'boolean') {
                res.dataType = enums_1.FormulaDataTypes.BOOLEAN;
            }
            else {
                res.dataType = enums_1.FormulaDataTypes.STRING;
            }
        }
        else if (parsedTree.type === enums_1.JSEPNode.UNARY_EXP) {
            // only support -ve values
            if (['-'].includes(parsedTree.operator) &&
                parsedTree.argument.type === enums_1.JSEPNode.LITERAL &&
                typeof parsedTree.argument.value === 'number') {
                res.dataType = enums_1.FormulaDataTypes.NUMERIC;
            }
            else {
                throw new error_1.FormulaError(enums_1.FormulaErrorType.NOT_SUPPORTED, {}, `Unary expression '${parsedTree.operator}' is not supported`);
            }
        }
        else if (parsedTree.type === enums_1.JSEPNode.BINARY_EXP) {
            res.left = await validateAndExtract(parsedTree.left);
            res.right = await validateAndExtract(parsedTree.right);
            const dateAndTimeParsedNode = handleBinaryExpressionForDateAndTime({
                sourceBinaryNode: res,
            });
            if (dateAndTimeParsedNode) {
                Object.assign(res, handleBinaryExpressionForDateAndTime({ sourceBinaryNode: res }));
                if (res.type !== enums_1.JSEPNode.BINARY_EXP) {
                    res.left = undefined;
                    res.right = undefined;
                    res.operator = undefined;
                }
            }
            else if (['==', '<', '>', '<=', '>=', '!='].includes(parsedTree.operator)) {
                res.dataType = enums_1.FormulaDataTypes.COND_EXP;
            }
            else if (parsedTree.operator === '+') {
                res.dataType = enums_1.FormulaDataTypes.NUMERIC;
                // if any side is string/date/other type, then the result will be concatenated string
                // e.g. 1 + '2' = '12'
                if ([
                    res.left,
                    res.right,
                ].some((r) => ![
                    enums_1.FormulaDataTypes.NUMERIC,
                    enums_1.FormulaDataTypes.BOOLEAN,
                    enums_1.FormulaDataTypes.NULL,
                    enums_1.FormulaDataTypes.UNKNOWN,
                ].includes(r.dataType))) {
                    res.dataType = enums_1.FormulaDataTypes.STRING;
                }
            }
            else if (['&'].includes(parsedTree.operator)) {
                res.dataType = enums_1.FormulaDataTypes.STRING;
            }
            else {
                res.dataType = enums_1.FormulaDataTypes.NUMERIC;
            }
        }
        else if (parsedTree.type === enums_1.JSEPNode.MEMBER_EXP) {
            throw new error_1.FormulaError(enums_1.FormulaErrorType.NOT_SUPPORTED, {}, 'Bracket notation is not supported');
        }
        else if (parsedTree.type === enums_1.JSEPNode.ARRAY_EXP) {
            throw new error_1.FormulaError(enums_1.FormulaErrorType.NOT_SUPPORTED, {}, 'Array is not supported');
        }
        else if (parsedTree.type === enums_1.JSEPNode.COMPOUND) {
            throw new error_1.FormulaError(enums_1.FormulaErrorType.NOT_SUPPORTED, {}, 'Compound statement is not supported');
        }
        return res;
    };
    try {
        // register jsep curly hook
        jsep_1.default.plugins.register(hooks_1.jsepCurlyHook);
        if (trackPosition) {
            jsep_1.default.plugins.register(hooks_1.jsepIndexHook);
        }
        const parsedFormula = (0, jsep_1.default)(formula);
        // TODO: better jsep expression handling
        const result = await validateAndExtract(parsedFormula);
        return result;
    }
    catch (ex) {
        if (trackPosition) {
            (0, handle_formula_error_1.handleFormulaError)({ formula, error: ex });
        }
        throw ex;
    }
}
//# sourceMappingURL=data:application/json;base64,