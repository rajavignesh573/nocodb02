"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const formulaHelpers_1 = require("./formulaHelpers");
const UITypes_1 = __importDefault(require("./UITypes"));
describe('Formula parsing and type validation', () => {
    it('Simple formula', async () => {
        const result = await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
            formula: '1 + 2',
            columns: [],
            clientOrSqlUi: 'mysql2',
            getMeta: async () => ({}),
        });
        expect(result.dataType).toEqual(formulaHelpers_1.FormulaDataTypes.NUMERIC);
    });
    it('Formula with IF condition', async () => {
        const result = await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
            formula: 'IF({column}, "Found", BLANK())',
            columns: [
                {
                    id: 'cid',
                    title: 'column',
                    uidt: UITypes_1.default.Number,
                },
            ],
            clientOrSqlUi: 'mysql2',
            getMeta: async () => ({}),
        });
        expect(result.dataType).toEqual(formulaHelpers_1.FormulaDataTypes.STRING);
    });
    it('Complex formula', async () => {
        const result = await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
            formula: 'SWITCH({column2},"value1",IF({column1}, "Found", BLANK()),"value2", 2)',
            columns: [
                {
                    id: 'id1',
                    title: 'column1',
                    uidt: UITypes_1.default.Number,
                },
                {
                    id: 'id2',
                    title: 'column2',
                    uidt: UITypes_1.default.SingleLineText,
                },
            ],
            clientOrSqlUi: 'mysql2',
            getMeta: async () => ({}),
        });
        expect(result.dataType).toEqual(formulaHelpers_1.FormulaDataTypes.STRING);
        const result1 = await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
            formula: 'SWITCH({column2},"value1",IF({column1}, 1, 2),"value2", 2)',
            columns: [
                {
                    id: 'id1',
                    title: 'column1',
                    uidt: UITypes_1.default.Number,
                },
                {
                    id: 'id2',
                    title: 'column2',
                    uidt: UITypes_1.default.SingleLineText,
                },
            ],
            clientOrSqlUi: 'mysql2',
            getMeta: async () => ({}),
        });
        expect(result1.dataType).toEqual(formulaHelpers_1.FormulaDataTypes.NUMERIC);
    });
    describe('Date and time interaction', () => {
        it('Time - time equals numeric', async () => {
            const result = await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                formula: '{Time1} - {Time2}',
                columns: [
                    {
                        id: 'TUrXeTf4JUHdnRvn',
                        title: 'Time1',
                        uidt: UITypes_1.default.Time,
                    },
                    {
                        id: 'J3aD/yLDT2GF6NEB',
                        title: 'Time2',
                        uidt: UITypes_1.default.Time,
                    },
                ],
                clientOrSqlUi: 'pg',
                getMeta: async () => ({}),
            });
            expect(result.dataType).toEqual(formulaHelpers_1.FormulaDataTypes.NUMERIC);
        });
        it('Time - time equals numeric', async () => {
            const result = await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                formula: '{Time1} - {Time2}',
                columns: [
                    {
                        id: 'TUrXeTf4JUHdnRvn',
                        title: 'Time1',
                        uidt: UITypes_1.default.Time,
                    },
                    {
                        id: 'J3aD/yLDT2GF6NEB',
                        title: 'Time2',
                        uidt: UITypes_1.default.Time,
                    },
                ],
                clientOrSqlUi: 'pg',
                getMeta: async () => ({}),
            });
            expect(result.dataType).toEqual(formulaHelpers_1.FormulaDataTypes.NUMERIC);
        });
        it('Date + time equals date', async () => {
            const result = await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                formula: '{Date1} + {Time2}',
                columns: [
                    {
                        id: 'TUrXeTf4JUHdnRvn',
                        title: 'Date1',
                        uidt: UITypes_1.default.Date,
                    },
                    {
                        id: 'J3aD/yLDT2GF6NEB',
                        title: 'Time2',
                        uidt: UITypes_1.default.Time,
                    },
                ],
                clientOrSqlUi: 'pg',
                getMeta: async () => ({}),
            });
            expect(result.dataType).toEqual(formulaHelpers_1.FormulaDataTypes.DATE);
        });
    });
    describe('binary expression', () => {
        it(`& operator will return string`, async () => {
            const result = await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                formula: '"Hello" & "World"',
                columns: [],
                clientOrSqlUi: 'pg',
                getMeta: async () => ({}),
            });
            expect(result.dataType).toBe(formulaHelpers_1.FormulaDataTypes.STRING);
        });
    });
    describe('errors', () => {
        it(`will provide position for syntax error`, async () => {
            try {
                await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                    formula: '1 +',
                    columns: [],
                    clientOrSqlUi: 'mysql2',
                    getMeta: async () => ({}),
                    trackPosition: true,
                });
            }
            catch (ex) {
                expect(ex.extra.position).toEqual({
                    column: 3,
                    row: 0,
                    length: 1,
                });
            }
            try {
                await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                    formula: '(1 + 1',
                    columns: [],
                    clientOrSqlUi: 'mysql2',
                    getMeta: async () => ({}),
                    trackPosition: true,
                });
            }
            catch (ex) {
                expect(ex.extra.position).toEqual({
                    column: 6,
                    row: 0,
                    length: 1,
                });
            }
            try {
                await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                    formula: 'CONCAT)',
                    columns: [],
                    clientOrSqlUi: 'mysql2',
                    getMeta: async () => ({}),
                    trackPosition: true,
                });
            }
            catch (ex) {
                expect(ex.extra.position).toEqual({
                    column: 6,
                    row: 0,
                    length: 1,
                });
            }
        });
        it(`will provide position for column not found`, async () => {
            try {
                await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                    formula: '1 + __a_',
                    columns: [],
                    clientOrSqlUi: 'mysql2',
                    getMeta: async () => ({}),
                    trackPosition: true,
                });
            }
            catch (ex) {
                expect(ex.extra.position).toEqual({
                    column: 4,
                    row: 0,
                    length: 4,
                });
            }
            try {
                await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                    formula: '__a_',
                    columns: [],
                    clientOrSqlUi: 'mysql2',
                    getMeta: async () => ({}),
                    trackPosition: true,
                });
            }
            catch (ex) {
                expect(ex.extra.position).toEqual({
                    column: 0,
                    row: 0,
                    length: 4,
                });
            }
            try {
                await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                    formula: 'CONCAT(__a_  , "A")',
                    columns: [],
                    clientOrSqlUi: 'mysql2',
                    getMeta: async () => ({}),
                    trackPosition: true,
                });
            }
            catch (ex) {
                expect(ex.extra.position).toEqual({
                    column: 7,
                    row: 0,
                    length: 6,
                });
            }
        });
        it(`will handle formula missing parentheses`, async () => {
            try {
                await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                    formula: 'CONCAT',
                    columns: [],
                    clientOrSqlUi: 'mysql2',
                    getMeta: async () => ({}),
                    trackPosition: true,
                });
            }
            catch (ex) {
                expect(ex.message).toContain('Missing parentheses after function name');
                expect(ex.extra.position).toEqual({
                    column: 6,
                    row: 0,
                    length: 1,
                });
            }
            try {
                await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                    formula: 'CONCAT(CONCAT)',
                    columns: [],
                    clientOrSqlUi: 'mysql2',
                    getMeta: async () => ({}),
                    trackPosition: true,
                });
            }
            catch (ex) {
                expect(ex.message).toContain('Missing parentheses after function name');
                expect(ex.extra.position).toEqual({
                    column: 13,
                    row: 0,
                    length: 1,
                });
            }
        });
        it(`will handle formula minimum argument`, async () => {
            try {
                await (0, formulaHelpers_1.validateFormulaAndExtractTreeWithType)({
                    formula: 'CONCAT(CONCAT())',
                    columns: [],
                    clientOrSqlUi: 'mysql2',
                    getMeta: async () => ({}),
                    trackPosition: true,
                });
            }
            catch (ex) {
                expect(ex.extra.position).toEqual({
                    column: 7,
                    row: 0,
                    length: 8,
                });
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,